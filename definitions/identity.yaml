openapi: 3.0.1
info:
  title: IdentityServer Internal API
  version: v1
servers:
  - url: https://cloud.uipath.com/identity_
paths:
  /api/Account/Profile:
    get:
      tags:
        - Account
      summary: Get the user profile.
      operationId: Account_Profile
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
  /api/Account/ClientAccessToken:
    get:
      tags:
        - Account
      summary: Get the user profile.
      operationId: Account_GetClientAccessToken
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/Account/Login:
    get:
      tags:
        - Account
      summary: Get the necessary information required to display the login page.
      operationId: Account_GetLoginSettings
      parameters:
        - name: returnUrl
          in: query
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LoginModel'
            application/json:
              schema:
                $ref: '#/components/schemas/LoginModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LoginModel'
    post:
      tags:
        - Account
      summary: Handle post-back from username/password login
      operationId: Account_Login
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LoginInputModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInputModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LoginInputModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LoginInputModel'
      responses:
        "200":
          description: Success
  /api/Account/Logout:
    post:
      tags:
        - Account
      summary: Handle logout page postback
      operationId: Account_Logout
      responses:
        "200":
          description: Success
  /api/Account/EmailConfirmation:
    post:
      tags:
        - Account
      summary: Confirms the email address.
      operationId: Account_ConfirmEmail
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConfirmEmailModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmEmailModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ConfirmEmailModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConfirmEmailModel'
      responses:
        "200":
          description: Success
  /api/Account/ForgotPassword:
    post:
      tags:
        - Account
      operationId: Account_ForgotPassword
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordModel'
      responses:
        "200":
          description: Success
  /api/Account/ResetPassword:
    post:
      tags:
        - Account
      operationId: Account_ResetPassword
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ResetPasswordModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ResetPasswordModel'
      responses:
        "200":
          description: Success
  /api/Account/ChangePassword:
    post:
      tags:
        - Account
      operationId: Account_ChangePassword
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangePasswordModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangePasswordModel'
      responses:
        "200":
          description: Success
  /api/Antiforgery/generate:
    get:
      tags:
        - Antiforgery
      operationId: AntiForgery_Generate
      responses:
        "200":
          description: Success
  /api/Antiforgery/generateswagger:
    get:
      tags:
        - Antiforgery
      operationId: AntiForgery_GenerateForSwagger
      responses:
        "200":
          description: Success
  /api/Antiforgery/generatelogout:
    get:
      tags:
        - Antiforgery
      operationId: AntiForgery_GenerateForLogout
      responses:
        "200":
          description: Success
  /api/ApiResource:
    get:
      tags:
        - ApiResource
      summary: Get the full list of identity server API Resources.
      operationId: ApiResource_GetApiResources
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResource'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResource'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResource'
    post:
      tags:
        - ApiResource
      summary: Creates a new identity server API Resource.
      operationId: ApiResource_CreateApiResource
      requestBody:
        description: Command used to create a new identity server API Resource.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateApiResourceCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiResourceCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateApiResourceCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateApiResourceCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
  /api/ApiResource/{apiResourceName}:
    get:
      tags:
        - ApiResource
      summary: Get the identity server API Resource that matches the provided name.
      operationId: ApiResource_GetApiResource
      parameters:
        - name: apiResourceName
          in: path
          description: The  identity server API Resource unique resource name to fetch.
          required: true
          schema:
            type: string
            description: The  identity server API Resource unique resource name to fetch.
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ApiResource'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResource'
            text/json:
              schema:
                $ref: '#/components/schemas/ApiResource'
    put:
      tags:
        - ApiResource
      summary: Updates the identity server API Resource entity.
      operationId: ApiResource_UpdateApiResource
      parameters:
        - name: apiResourceName
          in: path
          description: The current name of the API Resource that will be updated.
          required: true
          schema:
            type: string
            description: The current name of the API Resource that will be updated.
            nullable: true
      requestBody:
        description: Command used to update a ApiResource.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateApiResourceCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiResourceCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateApiResourceCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateApiResourceCommand'
      responses:
        "200":
          description: Success
    delete:
      tags:
        - ApiResource
      summary: Deletes the specified identity server API Resource.
      operationId: ApiResource_DeleteApiResource
      parameters:
        - name: apiResourceName
          in: path
          description: The identity server API Resource unique resource name that will be deleted.
          required: true
          schema:
            type: string
            description: The identity server API Resource unique resource name that will be deleted.
            nullable: true
      responses:
        "204":
          description: Success
  /api/auditlogs:
    post:
      tags:
        - AuditIngestion
      operationId: AuditIngestion_IngestAuditEvent
      parameters:
        - name: x-UiPath-Internal-AccountId
          in: header
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AuditEventApiDto'
          application/json:
            schema:
              $ref: '#/components/schemas/AuditEventApiDto'
          text/json:
            schema:
              $ref: '#/components/schemas/AuditEventApiDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuditEventApiDto'
      responses:
        "200":
          description: Success
  /api/AuditQuery/{organizationId}:
    get:
      tags:
        - AuditQuery
      operationId: AuditQuery_GetAuditEvents
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: language
          in: query
          schema:
            type: string
            nullable: true
        - name: top
          in: query
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: sortBy
          in: query
          schema:
            type: string
            nullable: true
        - name: sortOrder
          in: query
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuditQueryRecordDtoPagedResult'
            application/json:
              schema:
                $ref: '#/components/schemas/AuditQueryRecordDtoPagedResult'
            text/json:
              schema:
                $ref: '#/components/schemas/AuditQueryRecordDtoPagedResult'
  /api/AuditQuery/{organizationId}/download:
    get:
      tags:
        - AuditQuery
      operationId: AuditQuery_DownloadAuditEvents
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: language
          in: query
          schema:
            type: string
            nullable: true
        - name: size
          in: query
          schema:
            type: integer
            format: int32
            nullable: true
      responses:
        "200":
          description: Success
          content:
            application/octet-stream:
              schema:
                type: string
  /api/AuthenticationInformation/{organizationName}:
    get:
      tags:
        - AuthenticationInformation
      operationId: AuthenticationInformation_GetAuthenticationProviders
      parameters:
        - name: organizationName
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthenticationProviderDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthenticationProviderDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthenticationProviderDto'
  /api/AuthenticationSetting/{partitionGlobalId}:
    get:
      tags:
        - AuthenticationSetting
      summary: Gets the current authentication setting.
      operationId: AuthenticationSetting_Get
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition global id
          required: true
          schema:
            type: string
            description: Partition global id
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
    delete:
      tags:
        - AuthenticationSetting
      summary: Deletes the Authentication setttings of a partition.
      operationId: AuthenticationSetting_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          description: The global id of the partition
          required: true
          schema:
            type: string
            description: The global id of the partition
            format: uuid
      responses:
        "204":
          description: Success
  /api/AuthenticationSetting/getAll/{partitionGlobalId}:
    get:
      tags:
        - AuthenticationSetting
      summary: Gets all current authentication settings.
      operationId: AuthenticationSetting_GetAll
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition global id
          required: true
          schema:
            type: string
            description: Partition global id
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AuthenticationSettingDto'
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AuthenticationSettingDto'
            text/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/AuthenticationSettingDto'
  /api/AuthenticationSetting/GenerateTemplateSettings:
    post:
      tags:
        - AuthenticationSetting
      summary: "Generate a template configuration for a new authentication Settings\r\nFor example get Saml2 config based on IdentityService default values and from Metadata URL"
      operationId: AuthenticationSetting_GenerateTemplate
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
  /api/AuthenticationSetting:
    post:
      tags:
        - AuthenticationSetting
      summary: Deletes current authentication settings if exist and creates new ones.
      operationId: AuthenticationSetting_Set
      requestBody:
        description: Command used to set authentication setting.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
    put:
      tags:
        - AuthenticationSetting
      summary: Updates the current authentication setting.
      operationId: AuthenticationSetting_Update
      requestBody:
        description: Command used to update authentication setting.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingUpdateCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
  /api/AuthenticationSetting/IDP:
    post:
      tags:
        - AuthenticationSetting
      summary: Creates or updates IDP setting.
      operationId: AuthenticationSetting_CreateOrUpdateIDP
      requestBody:
        description: Command used to set authentication setting.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingIDPCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingIDPCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingIDPCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingIDPCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/AuthenticationSetting/IDP/{partitionGlobalId}:
    delete:
      tags:
        - AuthenticationSetting
      summary: Deletes the IDP Authentication setttings for a partition.
      operationId: AuthenticationSetting_DeleteIDP
      parameters:
        - name: partitionGlobalId
          in: path
          description: The global id of the partition
          required: true
          schema:
            type: string
            description: The global id of the partition
            format: uuid
      responses:
        "204":
          description: Success
  /api/AuthenticationSetting/DirectoryIntegration:
    post:
      tags:
        - AuthenticationSetting
      summary: Creates new authentication settings for directory integration.
      operationId: AuthenticationSetting_CreateDirectoryIntegration
      requestBody:
        description: Command used to set authentication setting.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
    put:
      tags:
        - AuthenticationSetting
      summary: Updates the current authentication setting for directory integration.
      operationId: AuthenticationSetting_UpdateDirectoryIntegration
      requestBody:
        description: Command used to update directory integration authentication setting.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryUpdateCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryUpdateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryUpdateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AuthenticationSettingDirectoryUpdateCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
            text/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSettingDto'
  /api/AuthenticationSetting/DirectoryIntegration/{partitionGlobalId}:
    delete:
      tags:
        - AuthenticationSetting
      summary: Deletes the directory integration Authentication setttings for a partition.
      operationId: AuthenticationSetting_DeleteDirectoryIntegration
      parameters:
        - name: partitionGlobalId
          in: path
          description: The global id of the partition
          required: true
          schema:
            type: string
            description: The global id of the partition
            format: uuid
      responses:
        "204":
          description: Success
  /api/CheckSession:
    get:
      tags:
        - CheckSession
      operationId: CheckSession_Get
      responses:
        "200":
          description: Success
  /api/CisKmsConfig:
    post:
      tags:
        - CisKmsConfig
      operationId: CisKmsConfig_UpdateKmsConfig
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/KmsConfigCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/KmsConfigCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/KmsConfigCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/KmsConfigCommand'
      responses:
        "201":
          description: Success
  /api/CisKmsConfig/{partitionGlobalId}:
    get:
      tags:
        - CisKmsConfig
      operationId: CisKmsConfig_GetKmsConfig
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
  /api/Client:
    get:
      tags:
        - Client
      summary: Get the full list of identity server clients.
      operationId: Client_GetClients
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Client'
    post:
      tags:
        - Client
      summary: Creates a new identity server client.
      operationId: Client_CreateClient
      requestBody:
        description: Command used to create a new identity server client.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateClientCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateClientCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateClientCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
  /api/Client/{clientId}:
    get:
      tags:
        - Client
      summary: Get the identity server client that matches the provided client id.
      operationId: Client_GetClient
      parameters:
        - name: clientId
          in: path
          description: The identity server client unique id.
          required: true
          schema:
            type: string
            description: The identity server client unique id.
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Client'
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
            text/json:
              schema:
                $ref: '#/components/schemas/Client'
    put:
      tags:
        - Client
      summary: Updates the identity server client entity.
      operationId: Client_UpdateClient
      parameters:
        - name: clientId
          in: path
          description: The current id of the Client that will be updated.
          required: true
          schema:
            type: string
            description: The current id of the Client that will be updated.
            nullable: true
      requestBody:
        description: Command used to update a Client.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateClientCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateClientCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateClientCommand'
      responses:
        "200":
          description: Success
    delete:
      tags:
        - Client
      summary: Deletes the specified identity server Client.
      operationId: Client_DeleteClient
      parameters:
        - name: clientId
          in: path
          description: The unique id of the identity server client that will be deleted.
          required: true
          schema:
            type: string
            description: The unique id of the identity server client that will be deleted.
            nullable: true
      responses:
        "204":
          description: Success
  /api/Client/info:
    get:
      tags:
        - Client
      summary: Get the well known identity server clients.
      operationId: Client_GetWellKnownClients
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  type: string
                  format: uuid
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  format: uuid
            text/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  format: uuid
  /api/ClientSecret/syncnow/{clientID}:
    post:
      tags:
        - ClientSecret
      operationId: ClientSecret_SyncSecret
      parameters:
        - name: clientID
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
  /api/ClientSecret/createnow/{clientID}:
    post:
      tags:
        - ClientSecret
      operationId: ClientSecret_CreateSecret
      parameters:
        - name: clientID
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
  /api/ClientSecret/{requestClientId}/{emergencyRollout}:
    get:
      tags:
        - ClientSecret
      operationId: ClientSecret_GetClientSecret
      parameters:
        - name: requestClientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
        - name: emergencyRollout
          in: path
          required: true
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SecretDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SecretDto'
  /api/ClientTemplate/templates:
    get:
      tags:
        - ClientTemplate
      operationId: ClientTemplate_GetClientTemplates
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientTemplateDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientTemplateDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientTemplateDto'
  /api/ClientTemplate:
    post:
      tags:
        - ClientTemplate
      operationId: ClientTemplate_CreateClientFromTemplate
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateClientFromTemplateCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientFromTemplateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateClientFromTemplateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateClientFromTemplateCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ClientDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
  /api/ClientTemplate/{partitionGlobalId}/{clientId}:
    get:
      tags:
        - ClientTemplate
      operationId: ClientTemplate_GetClient
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ClientDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
    delete:
      tags:
        - ClientTemplate
      operationId: ClientTemplate_DeleteClient
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "204":
          description: Success
        "404":
          description: Not Found
  /api/ClientTemplate/{clientId}:
    put:
      tags:
        - ClientTemplate
      operationId: ClientTemplate_UpdateClient
      parameters:
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateClientFromTemplateCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClientFromTemplateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateClientFromTemplateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateClientFromTemplateCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ClientDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ClientDto'
  /api/ClientTemplate/GenerateSecret:
    post:
      tags:
        - ClientTemplate
      operationId: ClientTemplate_GenerateSecret
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SecretDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SecretDto'
        "404":
          description: Not Found
  /api/ClientTemplate/{partitionGlobalId}/secrets/{secretId}:
    delete:
      tags:
        - ClientTemplate
      operationId: ClientTemplate_DeleteSecret
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: secretId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Success
  /api/Directory/Search/{partitionGlobalId}:
    get:
      tags:
        - Directory
      summary: Get directory entries in the partition.
      operationId: Directory_Search
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition identifier
          required: true
          schema:
            type: string
            description: Partition identifier
            format: uuid
        - name: startsWith
          in: query
          description: Prefix criteria used for search
          schema:
            type: string
            description: Prefix criteria used for search
            nullable: true
        - name: entityType
          in: query
          description: The type of directory entry
          schema:
            $ref: '#/components/schemas/DirectoryEntityType'
        - name: sourceFilter
          in: query
          description: Optional source filter for entities
          style: form
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SourceFilter'
            description: Optional source filter for entities
            nullable: true
          explode: true
        - name: scope
          in: query
          description: Optional scope used for entities in active directory.
          schema:
            type: string
            description: Optional scope used for entities in active directory.
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryEntityInfo'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryEntityInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryEntityInfo'
  /api/Directory/Tenant/{partitionGlobalId}:
    get:
      tags:
        - Directory
      summary: Gets the current external tenant information
      operationId: Directory_Tenant
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition identifier
          required: true
          schema:
            type: string
            description: Partition identifier
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DirectoryTenant'
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryTenant'
            text/json:
              schema:
                $ref: '#/components/schemas/DirectoryTenant'
  /api/Directory/Resolve/{partitionGlobalId}:
    post:
      tags:
        - Directory
      summary: Resolve a directory entry
      operationId: Directory_Resolve
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition identifier
          required: true
          schema:
            type: string
            description: Partition identifier
            format: uuid
      requestBody:
        description: Parameters to uniquely identify a directory entry based on Id and Type
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ResolveCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ResolveCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ResolveCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DirectoryUser'
                  - $ref: '#/components/schemas/DirectoryGroup'
                  - $ref: '#/components/schemas/DirectoryRobotUser'
                  - $ref: '#/components/schemas/DirectoryApplication'
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DirectoryUser'
                  - $ref: '#/components/schemas/DirectoryGroup'
                  - $ref: '#/components/schemas/DirectoryRobotUser'
                  - $ref: '#/components/schemas/DirectoryApplication'
            text/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DirectoryUser'
                  - $ref: '#/components/schemas/DirectoryGroup'
                  - $ref: '#/components/schemas/DirectoryRobotUser'
                  - $ref: '#/components/schemas/DirectoryApplication'
  /api/Directory/ResolveByName/{partitionGlobalId}:
    post:
      tags:
        - Directory
      summary: Resolve a directory entry
      operationId: Directory_ResolveByName
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition identifier
          required: true
          schema:
            type: string
            description: Partition identifier
            format: uuid
      requestBody:
        description: Parameters to uniquely identify a directory entry based on unique Name and Type
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ResolveByNameCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveByNameCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ResolveByNameCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ResolveByNameCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DirectoryUser'
                  - $ref: '#/components/schemas/DirectoryGroup'
                  - $ref: '#/components/schemas/DirectoryRobotUser'
                  - $ref: '#/components/schemas/DirectoryApplication'
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DirectoryUser'
                  - $ref: '#/components/schemas/DirectoryGroup'
                  - $ref: '#/components/schemas/DirectoryRobotUser'
                  - $ref: '#/components/schemas/DirectoryApplication'
            text/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DirectoryUser'
                  - $ref: '#/components/schemas/DirectoryGroup'
                  - $ref: '#/components/schemas/DirectoryRobotUser'
                  - $ref: '#/components/schemas/DirectoryApplication'
  /api/Directory/GroupMembership/{partitionGlobalId}:
    post:
      tags:
        - Directory
      summary: For a given user and list of groups, returns a subset of groups where the user is a member.
      operationId: Directory_GroupMembership
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition identifier
          required: true
          schema:
            type: string
            description: Partition identifier
            format: uuid
      requestBody:
        description: Parameters to uniquely identify an user and a subset of groups
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MembershipCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/MembershipCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MembershipCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryGroup'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryGroup'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryGroup'
  /api/Directory/BulkResolveByName/{partitionGlobalId}:
    post:
      tags:
        - Directory
      summary: Resolves multiple directory entities
      operationId: Directory_BulkResolveByName
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition identifier
          required: true
          schema:
            type: string
            description: Partition identifier
            format: uuid
      requestBody:
        description: Parameters to uniquely identify multiple directory entries based on Type and unique Name or Email
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkResolveByNameCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkResolveByNameCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkResolveByNameCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkResolveByNameCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            application/json:
              schema:
                type: object
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            text/json:
              schema:
                type: object
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
  /api/Directory/Scopes/{partitionGlobalId}:
    get:
      tags:
        - Directory
      summary: Returns all active directory domains.
      operationId: Directory_Scopes
      parameters:
        - name: partitionGlobalId
          in: path
          description: ""
          required: true
          schema:
            type: string
            description: ""
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryScope'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryScope'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryScope'
  /api/DirectoryConnection:
    post:
      tags:
        - DirectoryConnection
      summary: Create new directory connection.
      operationId: DirectoryConnection_CreateConnection
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateDirectoryConnectionCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectoryConnectionCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateDirectoryConnectionCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateDirectoryConnectionCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
  /api/DirectoryConnection/TestConfig:
    post:
      tags:
        - DirectoryConnection
      summary: Validate (LDAP) directory connection configuration.
      operationId: DirectoryConnection_TestConnectionConfiguration
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/TestConnectionConfigurationCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/TestConnectionConfigurationCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/TestConnectionConfigurationCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/TestConnectionConfigurationCommand'
      responses:
        "200":
          description: Success
  /api/DirectoryConnection/connections/{partitionGlobalId}:
    get:
      tags:
        - DirectoryConnection
      summary: Get all directory connections defined for the partition.
      operationId: DirectoryConnection_GetConnections
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryConnectionDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryConnectionDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DirectoryConnectionDto'
  /api/DirectoryConnection/{connectionId}:
    get:
      tags:
        - DirectoryConnection
      summary: Get directory connection by Id.
      operationId: DirectoryConnection_GetConnection
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
    put:
      tags:
        - DirectoryConnection
      summary: Update existing directory connection.
      operationId: DirectoryConnection_UpdateConnection
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateDirectoryConnectionCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectoryConnectionCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectoryConnectionCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateDirectoryConnectionCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DirectoryConnectionDto'
    delete:
      tags:
        - DirectoryConnection
      summary: Delete the specified directory connection.
      operationId: DirectoryConnection_DeleteConnection
      parameters:
        - name: connectionId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Success
  /api/DirectoryConnection/AvailableDirectoryTypes:
    get:
      tags:
        - DirectoryConnection
      operationId: DirectoryConnection_GetAvailableDirectoryConnectionTypes
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
  /api/DirectoryConnection/DirectoryConfiguration:
    get:
      tags:
        - DirectoryConnection
      operationId: DirectoryConnection_GetDirectoryConnectionConfiguration
      parameters:
        - name: identifier
          in: query
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigurationEntry'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigurationEntry'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigurationEntry'
  /api/ExternalApiResource:
    get:
      tags:
        - ExternalApiResource
      summary: Get the full list of external API Resources.
      operationId: ExternalApiResource_Get
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalResourceDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalResourceDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalResourceDto'
  /api/ExternalClient/{partitionGlobalId}:
    get:
      tags:
        - ExternalClient
      summary: Get the full list of external clients for given partition.
      operationId: ExternalClient_Get
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalClientDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalClientDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalClientDto'
  /api/ExternalClient/{partitionGlobalId}/{clientId}:
    get:
      tags:
        - ExternalClient
      summary: Get the external client given client id.
      operationId: ExternalClient_Get
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExternalClientDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalClientDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ExternalClientDto'
    put:
      tags:
        - ExternalClient
      summary: Update the external client given client id.
      operationId: ExternalClient_Update
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateExternalClientCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExternalClientCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateExternalClientCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateExternalClientCommand'
      responses:
        "200":
          description: Success
    delete:
      tags:
        - ExternalClient
      summary: Delete the external client given client id.
      operationId: ExternalClient_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "204":
          description: Success
  /api/ExternalClient:
    post:
      tags:
        - ExternalClient
      summary: Create a new external client.
      operationId: ExternalClient_Create
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateExternalClientCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExternalClientCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateExternalClientCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateExternalClientCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExternalClientDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalClientDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ExternalClientDto'
  /api/ExternalClient/{partitionGlobalId}/{clientId}/GenerateSecret:
    get:
      tags:
        - ExternalClient
      summary: Generate a new client secret for the give client.
      operationId: ExternalClient_GenerateSecret
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/ExternalClient/GenerateSecret:
    post:
      tags:
        - ExternalClient
      summary: Generate a new client secret for the give client.
      operationId: ExternalClient_GenerateSecret
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateClientSecretCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/SecretDto'
            application/json:
              schema:
                $ref: '#/components/schemas/SecretDto'
            text/json:
              schema:
                $ref: '#/components/schemas/SecretDto'
  /api/ExternalClient/{partitionGlobalId}/secrets/{secretId}:
    delete:
      tags:
        - ExternalClient
      operationId: ExternalClient_DeleteSecret
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: secretId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Success
  /api/ExternalIdentityProvider:
    get:
      tags:
        - ExternalIdentityProvider
      summary: Get the list of external identity providers filtered based on the partition global id.
      operationId: ExternalIdentityProvider_GetExternalIdentityProviders
      parameters:
        - name: partitionGlobalId
          in: query
          description: Filter the external providers based on the partition.
          schema:
            type: string
            description: Filter the external providers based on the partition.
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalIdentityProviderDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalIdentityProviderDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExternalIdentityProviderDto'
    post:
      tags:
        - ExternalIdentityProvider
      summary: Creates a new external identity provider.
      operationId: ExternalIdentityProvider_CreateExternalIdentityProvider
      requestBody:
        description: Command used to create a new external identity provider.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
  /api/ExternalIdentityProvider/{externalIdentityProviderId}:
    get:
      tags:
        - ExternalIdentityProvider
      summary: Get the external identity provider that matches the provided id.
      operationId: ExternalIdentityProvider_GetExternalIdentityProvider
      parameters:
        - name: externalIdentityProviderId
          in: path
          description: The database id for which to fetch the externalIdentityProvider.
          required: true
          schema:
            type: integer
            description: The database id for which to fetch the externalIdentityProvider.
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
    put:
      tags:
        - ExternalIdentityProvider
      summary: Updates the externalIdentityProvider entity
      operationId: ExternalIdentityProvider_UpdateExternalIdentityProvider
      parameters:
        - name: externalIdentityProviderId
          in: path
          description: The database identifier of the external identity provider.
          required: true
          schema:
            type: integer
            description: The database identifier of the external identity provider.
            format: int32
      requestBody:
        description: Command used to update a externalIdentityProvider.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateExternalIdentityProviderCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExternalIdentityProviderCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateExternalIdentityProviderCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateExternalIdentityProviderCommand'
      responses:
        "200":
          description: Success
    delete:
      tags:
        - ExternalIdentityProvider
      summary: Deletes the specified externalIdentityProvider.
      operationId: ExternalIdentityProvider_Delete
      parameters:
        - name: externalIdentityProviderId
          in: path
          description: "The database id of the external identity \r\n            provider that will be deleted."
          required: true
          schema:
            type: integer
            description: "The database id of the external identity \r\n            provider that will be deleted."
            format: int32
      responses:
        "204":
          description: Success
  /api/ExternalIdentityProvider/GenerateTemplateProvider:
    post:
      tags:
        - ExternalIdentityProvider
      summary: "Generates a template configuration for a new external identity provider.\r\nFor example get Saml2 config based on IdentityService default values and from Saml2 metadata"
      operationId: ExternalIdentityProvider_GenerateTemplate
      requestBody:
        description: command describing the input for the template
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateExternalIdentityProviderCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ExternalIdentityProviderDto'
  /api/ExternalIdentityProvider/{externalIdentityProviderId}/IsExclusive:
    put:
      tags:
        - ExternalIdentityProvider
      summary: "Sets the external identity provider as exclusive. If another external identity provider is already \r\nmarked as IsExclusive, it will be automatically unmarked."
      description: The IsExclusive flag can only be assigned to only one IDP at the same time.
      operationId: ExternalIdentityProvider_SetIsExclusive
      parameters:
        - name: externalIdentityProviderId
          in: path
          description: "The database id of the external identity \r\n            provider that will be deleted."
          required: true
          schema:
            type: integer
            description: "The database id of the external identity \r\n            provider that will be deleted."
            format: int32
      responses:
        "200":
          description: Success
  /api/GlobalExternalClient/{partitionGlobalId}/{clientId}:
    get:
      tags:
        - GlobalExternalClient
      summary: Get the GlobalExternalClient with given clientId and partitionId.
      operationId: GlobalExternalClient_Get
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalExternalClientDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalExternalClientDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalExternalClientDto'
    delete:
      tags:
        - GlobalExternalClient
      summary: Delete the global external client given client id under the given partition.
      operationId: GlobalExternalClient_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "204":
          description: Success
    put:
      tags:
        - GlobalExternalClient
      summary: Update the external client given client id.
      operationId: GlobalExternalClient_Update
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: clientId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateGlobalExternalClientCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGlobalExternalClientCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateGlobalExternalClientCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateGlobalExternalClientCommand'
      responses:
        "200":
          description: Success
  /api/GlobalExternalClient:
    post:
      tags:
        - GlobalExternalClient
      summary: Create a new global external client.
      operationId: GlobalExternalClient_Create
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateGlobalExternalClientCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGlobalExternalClientCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateGlobalExternalClientCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateGlobalExternalClientCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GlobalExternalClientDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalExternalClientDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GlobalExternalClientDto'
  /api/Group/{partitionGlobalId}:
    get:
      tags:
        - Group
      summary: Get all local and built-in groups from a partition
      description: 'OAuth required scopes: PM.Group or PM.Group.Read.'
      operationId: Group_GetGroups
      parameters:
        - name: partitionGlobalId
          in: path
          description: partition id
          required: true
          schema:
            type: string
            description: partition id
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
    delete:
      tags:
        - Group
      summary: Deletes multiple local groups from a partition
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_BulkDelete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkGroupDeleteCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkGroupDeleteCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkGroupDeleteCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkGroupDeleteCommand'
      responses:
        "204":
          description: Success
  /api/Group/{partitionGlobalId}/{groupId}:
    get:
      tags:
        - Group
      summary: Get local or built-in group by partition and group Id
      description: 'OAuth required scopes: PM.Group or PM.Group.Read.'
      operationId: Group_GetGroup
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GroupDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
    delete:
      tags:
        - Group
      summary: Deletes a local group
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
  /api/Group:
    post:
      tags:
        - Group
      summary: Creates a new local group
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_CreateGroup
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateGroupCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateGroupCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateGroupCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GroupDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
  /api/Group/{groupId}:
    put:
      tags:
        - Group
      summary: Updates a local group information.
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_UpdateGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateGroupCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateGroupCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GroupDto'
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
            text/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
  /api/Group/BulkLoadByIds/{partitionGlobalId}:
    post:
      tags:
        - Group
      summary: Get a list of local groups for specified IDs
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_BulkLoadByIds
      parameters:
        - name: partitionGlobalId
          in: path
          description: partition id
          required: true
          schema:
            type: string
            description: partition id
            format: uuid
      requestBody:
        description: if present only the selected groups will be loaded if they exists
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              description: if present only the selected groups will be loaded if they exists
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              description: if present only the selected groups will be loaded if they exists
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              description: if present only the selected groups will be loaded if they exists
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              description: if present only the selected groups will be loaded if they exists
              nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
  /api/Group/{partitionGlobalId}/{groupId}/CheckMembers:
    post:
      tags:
        - Group
      summary: Gets a list of local members of specified group, filtered by specified IDs
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_CheckMembers
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              nullable: true
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              nullable: true
          text/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            text/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
  /api/IdentityResource:
    get:
      tags:
        - IdentityResource
      summary: Get the full list of Identity Resources (Identity Server).
      operationId: IdentityResource_GetIdentityResources
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityResource'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityResource'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdentityResource'
    post:
      tags:
        - IdentityResource
      summary: Creates a new Identity Resource (Identity Server).
      operationId: IdentityResource_CreateIdentityResource
      requestBody:
        description: Command used to create a new identity server Identity Resource.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateIdentityResourceCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityResourceCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityResourceCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateIdentityResourceCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: integer
                format: int32
            application/json:
              schema:
                type: integer
                format: int32
            text/json:
              schema:
                type: integer
                format: int32
  /api/IdentityResource/{identityResourceName}:
    get:
      tags:
        - IdentityResource
      summary: Get the Identity Resource (Identity Server) that matches the provided name.
      operationId: IdentityResource_GetIdentityResource
      parameters:
        - name: identityResourceName
          in: path
          description: The  identity server Identity Resource unique resource name to fetch.
          required: true
          schema:
            type: string
            description: The  identity server Identity Resource unique resource name to fetch.
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResource'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResource'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResource'
    put:
      tags:
        - IdentityResource
      summary: Updates the Identity Resource entity (Identity Server).
      operationId: IdentityResource_UpdateIdentityResource
      parameters:
        - name: identityResourceName
          in: path
          description: The current name of the Identity Resource that will be updated.
          required: true
          schema:
            type: string
            description: The current name of the Identity Resource that will be updated.
            nullable: true
      requestBody:
        description: Command used to update a IdentityResource.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityResourceCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityResourceCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityResourceCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateIdentityResourceCommand'
      responses:
        "200":
          description: Success
    delete:
      tags:
        - IdentityResource
      summary: Deletes the specified Identity Resource (Identity Server).
      operationId: IdentityResource_DeleteIdentityResource
      parameters:
        - name: identityResourceName
          in: path
          description: The unique name of the Identity Resource that will be deleted.
          required: true
          schema:
            type: string
            description: The unique name of the Identity Resource that will be deleted.
            nullable: true
      responses:
        "204":
          description: Success
  /api/Language:
    get:
      tags:
        - Language
      summary: Get the full list of languages.
      operationId: Language_GetLanguages
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageDto'
  /api/Language/{languageCode}/translations:
    get:
      tags:
        - Language
      summary: Get the list of client translations based on the specified language.
      operationId: Language_GetClientTranslations
      parameters:
        - name: languageCode
          in: path
          description: The translation language code.
          required: true
          schema:
            type: string
            description: The translation language code.
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  type: string
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
            text/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/MessageTemplate/{templateId}:
    get:
      tags:
        - MessageTemplate
      summary: Get a message template by Id.
      operationId: MessageTemplate_GetTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
    put:
      tags:
        - MessageTemplate
      summary: Update existing message template.
      operationId: MessageTemplate_UpdateTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateMessageTemplateCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageTemplateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageTemplateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateMessageTemplateCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
    delete:
      tags:
        - MessageTemplate
      summary: Delete the specified message template.
      operationId: MessageTemplate_DeleteTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Success
  /api/MessageTemplate:
    get:
      tags:
        - MessageTemplate
      summary: Get a message template using the provided filter.
      operationId: MessageTemplate_GetTemplate
      parameters:
        - name: name
          in: query
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
            text/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
    post:
      tags:
        - MessageTemplate
      summary: Create new message template.
      operationId: MessageTemplate_CreateTemplate
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateMessageTemplateCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageTemplateCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateMessageTemplateCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateMessageTemplateCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: integer
                format: int64
            application/json:
              schema:
                type: integer
                format: int64
            text/json:
              schema:
                type: integer
                format: int64
  /api/Organization/{organizationId}/organizationserviceinstances/identity:
    delete:
      tags:
        - Organization
      operationId: Organization_DeleteOrganizationServiceInstance
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DeleteOrganizationServiceInstanceRequestDto'
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteOrganizationServiceInstanceRequestDto'
          text/json:
            schema:
              $ref: '#/components/schemas/DeleteOrganizationServiceInstanceRequestDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DeleteOrganizationServiceInstanceRequestDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/DeleteOrganizationResponseDto'
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOrganizationResponseDto'
            text/json:
              schema:
                $ref: '#/components/schemas/DeleteOrganizationResponseDto'
  /api/Partition/{partitionGlobalId}:
    get:
      tags:
        - Partition
      summary: Get a single partition by its global Id.
      operationId: Partition_Get
      parameters:
        - name: partitionGlobalId
          in: path
          description: The partition`s global Id.
          required: true
          schema:
            type: string
            description: The partition`s global Id.
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PartitionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PartitionDto'
    put:
      tags:
        - Partition
      summary: Update a partition by its global Id.
      operationId: Partition_Update
      parameters:
        - name: partitionGlobalId
          in: path
          description: Target partition`s global Id to update.
          required: true
          schema:
            type: string
            description: Target partition`s global Id to update.
            format: uuid
      requestBody:
        description: Command used to update a Partition.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
    delete:
      tags:
        - Partition
      summary: Delete a partition by its global Id.
      operationId: Partition_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          description: Target partition`s global Id to delete.
          required: true
          schema:
            type: string
            description: Target partition`s global Id to delete.
            format: uuid
      responses:
        "204":
          description: Success
  /api/Partition:
    post:
      tags:
        - Partition
      summary: Creates a new partition.
      operationId: Partition_Create
      requestBody:
        description: Command used to create a new partition.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreatePartitionCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePartitionCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreatePartitionCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreatePartitionCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PartitionDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PartitionDto'
  /api/Partition/{partitionGlobalId}/restore:
    post:
      tags:
        - Partition
      summary: Restore a partition by its global Id.
      operationId: Partition_Restore
      parameters:
        - name: partitionGlobalId
          in: path
          description: Target partition`s global Id to restore.
          required: true
          schema:
            type: string
            description: Target partition`s global Id to restore.
            format: uuid
      responses:
        "200":
          description: Success
  /api/Partition/{partitionGlobalId}/UpdateAllowedIdp:
    patch:
      tags:
        - Partition
      summary: Updates the allowed idp
      operationId: Partition_UpdateAllowedIdp
      parameters:
        - name: partitionGlobalId
          in: path
          description: The database identifier of the partition.
          required: true
          schema:
            type: string
            description: The database identifier of the partition.
            format: uuid
      requestBody:
        description: The allowed idp for the partition.
        content:
          application/json-patch+json:
            schema:
              type: string
              description: The allowed idp for the partition.
              nullable: true
          application/json:
            schema:
              type: string
              description: The allowed idp for the partition.
              nullable: true
          text/json:
            schema:
              type: string
              description: The allowed idp for the partition.
              nullable: true
          application/*+json:
            schema:
              type: string
              description: The allowed idp for the partition.
              nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
  /api/PartitionAccessPolicy/{partitionGlobalId}:
    put:
      tags:
        - PartitionAccessPolicy
      summary: Updates the partition access policy
      operationId: PartitionAccessPolicy_UpdatePartitionPolicy
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition of the access policy to update
          required: true
          schema:
            type: string
            description: Partition of the access policy to update
            format: uuid
      requestBody:
        description: Command encapsulating entities to be added and/or removed
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionAccessPolicyCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionAccessPolicyCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionAccessPolicyCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionAccessPolicyCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            text/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
    get:
      tags:
        - PartitionAccessPolicy
      summary: Returns access policy entities from specified partition
      operationId: PartitionAccessPolicy_GetPartitionPolicy
      parameters:
        - name: partitionGlobalId
          in: path
          description: Partition of the access policy to read
          required: true
          schema:
            type: string
            description: Partition of the access policy to read
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
            text/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/DirectoryUser'
                    - $ref: '#/components/schemas/DirectoryGroup'
                    - $ref: '#/components/schemas/DirectoryRobotUser'
                    - $ref: '#/components/schemas/DirectoryApplication'
  /api/migration/{partitionId}/properties/destination:
    get:
      tags:
        - PartitionMove
      operationId: PartitionMove_GetPartitionMigrationPropertiesForDestination
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesResponse'
  /api/migration/{partitionId}/properties/source:
    get:
      tags:
        - PartitionMove
      operationId: PartitionMove_GetPartitionMigrationPropertiesForSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertiesResponse'
  /api/migration/{partitionId}/compatibility_report/source:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_GenerateDataCompatibilityReportOnSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompatibilityReportResponse'
  /api/migration/{partitionId}/compatibility_report/destination:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_GenerateDataCompatibilityReportOnDestination
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompatibilityReportResponse'
  /api/migration/{partitionId}/pre_maintenance_data_move/source:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_RunPreMaintenanceDataMoveOnSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMoveResponse'
  /api/migration/{partitionId}/pre_maintenance_data_move/destination:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_RunPreMaintenanceDataMoveOnDestination
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMoveResponse'
  /api/migration/{partitionId}/maintenance_mode/source:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_StartMaintenanceModeOnSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MaintenanceModeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceModeRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/MaintenanceModeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MaintenanceModeRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceModeResponse'
  /api/migration/{partitionId}/maintenance_mode/destination:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_StartMaintenanceModeOnDestination
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceModeResponse'
  /api/migration/{partitionId}/data_move/source:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_RunDataMoveOnSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMoveResponse'
  /api/migration/{partitionId}/data_move/destination:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_RunDataMoveOnDestination
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataMoveRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMoveResponse'
  /api/migration/{partitionId}/finalize/source:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_FinalizeOnSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
      responses:
        "200":
          description: Success
  /api/migration/{partitionId}/finalize/destination:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_FinalizeOnDestination
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FinalizeRequest'
      responses:
        "200":
          description: Success
  /api/migration/{partitionId}/rollback/source:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_RollbackMigrationOnSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RollbackResponse'
  /api/migration/{partitionId}/rollback/destination:
    post:
      tags:
        - PartitionMove
      operationId: PartitionMove_RollbackMigrationOnDestination
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RollbackResponse'
  /api/migration/{partitionId}/delete/source:
    delete:
      tags:
        - PartitionMove
      operationId: PartitionMove_DeletePartitionFromSource
      parameters:
        - name: partitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DeleteRequest'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
  /api/ReferenceToken:
    post:
      tags:
        - ReferenceToken
      operationId: ReferenceToken_CreateToken
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateReferenceTokenCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReferenceTokenCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateReferenceTokenCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateReferenceTokenCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
    get:
      tags:
        - ReferenceToken
      operationId: ReferenceToken_GetTokens
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferenceTokenDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferenceTokenDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReferenceTokenDto'
    delete:
      tags:
        - ReferenceToken
      operationId: ReferenceToken_BulkDeleteTokens
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkDeleteReferenceTokensCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteReferenceTokensCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteReferenceTokensCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkDeleteReferenceTokensCommand'
      responses:
        "204":
          description: Success
  /api/ReferenceToken/{referenceTokenId}:
    get:
      tags:
        - ReferenceToken
      operationId: ReferenceToken_GetToken
      parameters:
        - name: referenceTokenId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ReferenceTokenDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceTokenDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ReferenceTokenDto'
    delete:
      tags:
        - ReferenceToken
      operationId: ReferenceToken_DeleteToken
      parameters:
        - name: referenceTokenId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      responses:
        "204":
          description: Success
    put:
      tags:
        - ReferenceToken
      operationId: ReferenceToken_RegenerateToken
      parameters:
        - name: referenceTokenId
          in: path
          required: true
          schema:
            type: string
            nullable: true
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RegenerateReferenceTokenCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/RegenerateReferenceTokenCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RegenerateReferenceTokenCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegenerateReferenceTokenCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
  /api/ReferenceToken/Exchange:
    post:
      tags:
        - ReferenceToken
      operationId: ReferenceToken_ExchangeReferenceToken
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: string
              nullable: true
          application/json:
            schema:
              type: string
              nullable: true
          text/json:
            schema:
              type: string
              nullable: true
          application/*+json:
            schema:
              type: string
              nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserAccessTokenDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccessTokenDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserAccessTokenDto'
  /api/RobotAccount/{partitionGlobalId}:
    get:
      tags:
        - RobotAccount
      summary: Get all robot accounts from a partition
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Read.'
      operationId: RobotAccount_GetRobotAccounts
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: searchTerm
          in: query
          schema:
            type: string
            nullable: true
        - name: top
          in: query
          description: The number of records to return. Default is 10.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to return. Default is 10.
            format: int32
        - name: skip
          in: query
          description: The number of records to skip. Default is 0.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to skip. Default is 0.
            format: int32
        - name: sortBy
          in: query
          description: The name of the field to sort by.
          schema:
            type: string
            description: The name of the field to sort by.
            nullable: true
        - name: sortOrder
          in: query
          description: The sort order.
          schema:
            $ref: '#/components/schemas/SortOrderDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RobotAccountDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDtoPagedResultDto'
    delete:
      tags:
        - RobotAccount
      summary: Deletes multiple robot accounts from a partition
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_BulkDelete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkRobotAccountDeleteCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRobotAccountDeleteCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkRobotAccountDeleteCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkRobotAccountDeleteCommand'
      responses:
        "204":
          description: Success
  /api/RobotAccount/{partitionGlobalId}/{robotAccountId}:
    get:
      tags:
        - RobotAccount
      summary: Get robot account by partition and robot account Id
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Read.'
      operationId: RobotAccount_GetRobotAccount
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: robotAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
    delete:
      tags:
        - RobotAccount
      summary: Deletes a robot account
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: robotAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Success
  /api/RobotAccount:
    post:
      tags:
        - RobotAccount
      summary: Creates a new  robot account
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_CreateRobotAccount
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateRobotAccountCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRobotAccountCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateRobotAccountCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateRobotAccountCommand'
      responses:
        "201":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
  /api/RobotAccount/{robotAccountId}:
    put:
      tags:
        - RobotAccount
      summary: Updates a robot account information.
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_UpdateRobotAccount
      parameters:
        - name: robotAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateRobotAccountCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRobotAccountCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateRobotAccountCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateRobotAccountCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
            text/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
  /api/RobotProperties:
    post:
      tags:
        - RobotProperties
      operationId: RobotProperties_CreateRobotProperties
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RobotClientSecretCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/RobotClientSecretCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RobotClientSecretCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RobotClientSecretCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RobotClientSecretDto'
            application/json:
              schema:
                $ref: '#/components/schemas/RobotClientSecretDto'
            text/json:
              schema:
                $ref: '#/components/schemas/RobotClientSecretDto'
    delete:
      tags:
        - RobotProperties
      operationId: RobotProperties_DeleteRobotProperties
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RobotPropertiesBulkDeleteCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/RobotPropertiesBulkDeleteCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/RobotPropertiesBulkDeleteCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RobotPropertiesBulkDeleteCommand'
      responses:
        "204":
          description: Success
  /api/Rule/{partitionGlobalId}:
    get:
      tags:
        - Rule
      operationId: Rule_BulkGetRules
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RuleDto'
  /api/Rule/{partitionGlobalId}/{ruleId}:
    get:
      tags:
        - Rule
      operationId: Rule_GetRule
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: ruleId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RuleDto'
            application/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
            text/json:
              schema:
                $ref: '#/components/schemas/RuleDto'
    delete:
      tags:
        - Rule
      operationId: Rule_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: ruleId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "204":
          description: Success
  /api/Rule:
    post:
      tags:
        - Rule
      operationId: Rule_CreateRule
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateRuleCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRuleCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateRuleCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateRuleCommand'
      responses:
        "201":
          description: Success
    put:
      tags:
        - Rule
      operationId: Rule_UpdateRule
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateRuleCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRuleCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateRuleCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateRuleCommand'
      responses:
        "200":
          description: Success
    delete:
      tags:
        - Rule
      operationId: Rule_Delete
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkDeleteCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkDeleteCommand'
      responses:
        "204":
          description: Success
  /api/Setting:
    get:
      tags:
        - Setting
      summary: Get an application settings for a list of keys in a tenant
      description: 'OAuth required scopes: PM.Setting or PM.Setting.Read.'
      operationId: Setting_GetSettingsBulk
      parameters:
        - name: key
          in: query
          style: form
          schema:
            type: array
            items:
              type: string
            nullable: true
          explode: true
        - name: partitionGlobalId
          in: query
          schema:
            type: string
            format: uuid
            nullable: true
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
    put:
      tags:
        - Setting
      summary: Updates or create new settings if they don't exist on a specific tenant.
      description: 'OAuth required scopes: PM.Setting or PM.Setting.Write.'
      operationId: Setting_UpdateSettings
      requestBody:
        description: A bulk command to create/update a list of settings on a specific tenant.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkCreateOrUpdateSettingsCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCreateOrUpdateSettingsCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkCreateOrUpdateSettingsCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkCreateOrUpdateSettingsCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
        "409":
          description: Conflict
    delete:
      tags:
        - Setting
      summary: Bulk deletes the specified list of settings for a specified partition.
      operationId: Setting_BulkDelete
      requestBody:
        description: The bulk delete command.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkDeleteSettingsCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteSettingsCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteSettingsCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkDeleteSettingsCommand'
      responses:
        "204":
          description: Success
  /api/Setting/{settingId}:
    delete:
      tags:
        - Setting
      summary: Deletes the specified setting.
      operationId: Setting_Delete
      parameters:
        - name: settingId
          in: path
          description: The database id of the setting that will be deleted.
          required: true
          schema:
            type: integer
            description: The database id of the setting that will be deleted.
            format: int64
      responses:
        "204":
          description: Success
  /api/Setting/VerifySmtpSettings:
    post:
      tags:
        - Setting
      summary: Verify whether the given SMTP settings are correct or not by sending an email to a recipient.
      operationId: Setting_VerifySmtpSetting
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/VerifySmtpSettingsCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/VerifySmtpSettingsCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/VerifySmtpSettingsCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/VerifySmtpSettingsCommand'
      responses:
        "200":
          description: Success
  /api/SigningCredential/sync:
    post:
      tags:
        - SigningCredential
      operationId: SigningCredential_Sync
      responses:
        "200":
          description: Success
  /api/telemetry:
    post:
      tags:
        - Telemetry
      operationId: Telemetry_RecordTelemetry
      responses:
        "200":
          description: Success
  /api/TokenEndpoint/AssumeUserIdentity:
    post:
      tags:
        - TokenEndpoint
      summary: Create new Assume User Identity Token.
      operationId: TokenEndpoint_AssumeUserIdentity
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/AssumeUserIdentityCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/AssumeUserIdentityCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/AssumeUserIdentityCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/AssumeUserIdentityCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ActorUserTokenDto'
            application/json:
              schema:
                $ref: '#/components/schemas/ActorUserTokenDto'
            text/json:
              schema:
                $ref: '#/components/schemas/ActorUserTokenDto'
  /api/User/{userId}:
    get:
      tags:
        - User
      summary: Get the user at the specified location
      description: 'OAuth required scopes: PM.User or PM.User.Read.'
      operationId: User_GetUser
      parameters:
        - name: userId
          in: path
          description: The data used to create a new user.
          required: true
          schema:
            type: string
            description: The data used to create a new user.
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
        - User
      summary: Updates the specified user.
      description: Updating user groups requires partition administrator group membership.
      operationId: User_Update
      parameters:
        - name: userId
          in: path
          description: The database identifier of the user.
          required: true
          schema:
            type: string
            description: The database identifier of the user.
            format: uuid
      requestBody:
        description: The command that stores the information to update user.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
    delete:
      tags:
        - User
      summary: Deletes the specified user.
      operationId: User_Delete
      parameters:
        - name: userId
          in: path
          description: The id of the user that will be deleted.
          required: true
          schema:
            type: string
            description: The id of the user that will be deleted.
            format: uuid
      responses:
        "204":
          description: Success
  /api/User:
    post:
      tags:
        - User
      summary: Creates a new user. This API is idempotent, the existing user will be deleted if trying to be created again.
      description: Creating user in a group requires partition administrator group membership.
      operationId: User_CreateUser
      requestBody:
        description: The data used to create a new user.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
    delete:
      tags:
        - User
      summary: Bulk deletes the specified list of users.
      operationId: User_BulkDelete
      requestBody:
        description: The bulk delete command.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/BulkSoftDeleteCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSoftDeleteCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/BulkSoftDeleteCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/BulkSoftDeleteCommand'
      responses:
        "204":
          description: Success
  /api/User/BulkCreate:
    post:
      tags:
        - User
      summary: Creates users in bulk.
      description: Creating users in a group requires partition administrator group membership.
      operationId: User_CreateUsers
      requestBody:
        description: The data used to create a users in bulk.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateUsersCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsersCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUsersCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUsersCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
  /api/User/{userId}/changepassword:
    post:
      tags:
        - User
      summary: Changes the user's password.
      description: 'OAuth required scopes: PM.User or PM.User.Write.'
      operationId: User_ChangePassword
      parameters:
        - name: userId
          in: path
          description: The database user id.
          required: true
          schema:
            type: string
            description: The database user id.
            format: uuid
      requestBody:
        description: The change user password command..
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
  /api/User/InviteUsers:
    post:
      tags:
        - User
      summary: Invite users in bulk.
      description: Creating users in a group requires partition administrator group membership.
      operationId: User_InviteUsers
      requestBody:
        description: The data used to invite/create a users in bulk.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InvitedUser'
              description: The data used to invite/create a users in bulk.
              nullable: true
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InvitedUser'
              description: The data used to invite/create a users in bulk.
              nullable: true
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InvitedUser'
              description: The data used to invite/create a users in bulk.
              nullable: true
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InvitedUser'
              description: The data used to invite/create a users in bulk.
              nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
            text/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
  /api/UserInvite/{partitionGlobalId}:
    post:
      tags:
        - UserInvite
      summary: Confirms the email invitation
      operationId: UserInvite_ConfirmInvite
      parameters:
        - name: partitionGlobalId
          in: path
          description: organization ID
          required: true
          schema:
            type: string
            description: organization ID
            format: uuid
      requestBody:
        description: updates to user metadata
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserMetadataCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/UserMetadataCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/UserMetadataCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserMetadataCommand'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ActionResult'
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ActionResult'
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
    delete:
      tags:
        - UserInvite
      summary: Dismiss the email invitation
      operationId: UserInvite_DismissInvite
      parameters:
        - name: partitionGlobalId
          in: path
          description: organization ID
          required: true
          schema:
            type: string
            description: organization ID
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ActionResult'
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ActionResult'
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
            text/json:
              schema:
                $ref: '#/components/schemas/ActionResult'
  /api/User/{userId}/loginAttempts:
    get:
      tags:
        - UserLoginAttempt
      summary: Get the login attempts of a user
      description: 'OAuth required scopes: PM.UserLoginAttempt or PM.UserLoginAttempt.Read.'
      operationId: UserLoginAttempt_GetLoginAttempts
      parameters:
        - name: userId
          in: path
          description: The data used to create a new user.
          required: true
          schema:
            type: string
            description: The data used to create a new user.
            format: uuid
        - name: userSID
          in: query
          description: The AD user SID.
          schema:
            type: string
            description: The AD user SID.
            nullable: true
        - name: top
          in: query
          description: The number of records to return. Default is 10.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to return. Default is 10.
            format: int32
        - name: skip
          in: query
          description: The number of records to skip. Default is 0.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to skip. Default is 0.
            format: int32
        - name: sortBy
          in: query
          description: The name of the field to sort by.
          schema:
            type: string
            description: The name of the field to sort by.
            nullable: true
        - name: sortOrder
          in: query
          description: The sort order.
          schema:
            $ref: '#/components/schemas/SortOrderDto'
        - name: since
          in: query
          description: The date since records should be returned.
          schema:
            type: string
            description: The date since records should be returned.
            format: date-time
            nullable: true
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserLoginAttemptDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginAttemptDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserLoginAttemptDtoPagedResultDto'
  /api/UserOrgs/OrgInfoLocalByAuth0Token/{organizationId}:
    get:
      tags:
        - UserOrgs
      operationId: UserOrgs_OrgInfoLocalByAuth0Token
      parameters:
        - name: organizationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
            text/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfo'
  /api/UserOrgs/userOrgsLocalByAuth0Token:
    get:
      tags:
        - UserOrgs
      operationId: UserOrgs_UserOrgsLocalByAuth0Token
      parameters:
        - name: includeNonAcceptedInvites
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
  /api/UserOrgs/userOrgsLocalByAADToken:
    get:
      tags:
        - UserOrgs
      operationId: UserOrgs_UserOrgsLocalByAADToken
      parameters:
        - name: includeNonAcceptedInvites
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
  /api/UserOrgs/userOrgs:
    get:
      tags:
        - UserOrgs
      operationId: UserOrgs_UserOrgs
      parameters:
        - name: email
          in: query
          schema:
            type: string
            nullable: true
        - name: includeNonAcceptedInvites
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganizationInfo'
  /api/UserPartition/users/{partitionGlobalId}:
    get:
      tags:
        - UserPartition
      summary: Get a list of users that the target partition has
      description: The maximum number of returned users is 1000.
      operationId: UserPartition_GetPartitionUsers
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: searchTerm
          in: query
          schema:
            type: string
            nullable: true
        - name: top
          in: query
          description: The number of records to return. Default is 10.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to return. Default is 10.
            format: int32
        - name: skip
          in: query
          description: The number of records to skip. Default is 0.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to skip. Default is 0.
            format: int32
        - name: sortBy
          in: query
          description: The name of the field to sort by.
          schema:
            type: string
            description: The name of the field to sort by.
            nullable: true
        - name: sortOrder
          in: query
          description: The sort order.
          schema:
            $ref: '#/components/schemas/SortOrderDto'
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/UserDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/UserDtoPagedResultDto'
  /api/UserPartition/partitions/{userId}:
    get:
      tags:
        - UserPartition
      summary: Get a list of partitions that the target user is member of
      description: The maximum number of returned users is 1000.
      operationId: UserPartition_GetUserPartitions
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: top
          in: query
          description: The number of records to return. Default is 10.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to return. Default is 10.
            format: int32
        - name: skip
          in: query
          description: The number of records to skip. Default is 0.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            description: The number of records to skip. Default is 0.
            format: int32
      responses:
        "200":
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PartitionDtoPagedResultDto'
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionDtoPagedResultDto'
            text/json:
              schema:
                $ref: '#/components/schemas/PartitionDtoPagedResultDto'
      deprecated: true
  /api/UserPartition:
    post:
      tags:
        - UserPartition
      summary: Add user to the target partition
      operationId: UserPartition_AddUserToPartition
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CreateUserPartitionCommand'
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserPartitionCommand'
          text/json:
            schema:
              $ref: '#/components/schemas/CreateUserPartitionCommand'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CreateUserPartitionCommand'
      responses:
        "200":
          description: Success
      deprecated: true
    delete:
      tags:
        - UserPartition
      summary: Remove user from the target partition
      operationId: UserPartition_RemoveUserFromPartition
      parameters:
        - name: partitionGlobalId
          in: query
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
      deprecated: true
components:
  schemas:
    UserProfileDto:
      type: object
      properties:
        partitionName:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          format: uuid
        userName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        isAdmin:
          type: boolean
        fullName:
          type: string
          nullable: true
    ExternalIdentityProviderModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        displayName:
          type: string
          nullable: true
        authenticationScheme:
          type: string
          nullable: true
        isExclusive:
          type: boolean
    LoginModel:
      type: object
      properties:
        allowRememberLogin:
          type: boolean
        enableBasicAuth:
          type: boolean
        externalIdentityProviders:
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentityProviderModel'
          nullable: true
        clientName:
          type: string
          nullable: true
        applicationTitle:
          type: string
          nullable: true
        partitionName:
          type: string
          nullable: true
        cookieExpireMinutes:
          type: integer
          format: int32
        externalLogoutUrl:
          type: string
          nullable: true
        termsAndConditionsUrl:
          type: string
          nullable: true
        loginLayout:
          type: string
          nullable: true
        orchestratorUrl:
          type: string
          nullable: true
        applicationEnvironmentName:
          type: string
          nullable: true
    LoginInputModel:
      required:
        - password
        - usernameOrEmail
      type: object
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string
        rememberLogin:
          type: boolean
        partitionName:
          type: string
          nullable: true
    ConfirmEmailModel:
      required:
        - code
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        code:
          type: string
      description: The model used to confirm an user's email address.
    ForgotPasswordModel:
      required:
        - partitionName
        - usernameOrEmail
      type: object
      properties:
        usernameOrEmail:
          type: string
        partitionName:
          type: string
    ResetPasswordModel:
      required:
        - password
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        password:
          maxLength: 100
          minLength: 6
          type: string
          format: password
        confirmPassword:
          type: string
          format: password
          nullable: true
        code:
          type: string
          nullable: true
    ChangePasswordModel:
      required:
        - newPassword
        - oldPassword
        - userId
      type: object
      properties:
        userId:
          type: string
          format: uuid
        oldPassword:
          type: string
          format: password
        newPassword:
          maxLength: 256
          minLength: 1
          type: string
          format: password
    Secret:
      type: object
      properties:
        description:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        expiration:
          type: string
          format: date-time
          nullable: true
        type:
          type: string
          nullable: true
    ApiResource:
      type: object
      properties:
        requireResourceIndicator:
          type: boolean
        apiSecrets:
          type: array
          items:
            $ref: '#/components/schemas/Secret'
          nullable: true
        scopes:
          type: array
          items:
            type: string
          nullable: true
        allowedAccessTokenSigningAlgorithms:
          type: array
          items:
            type: string
          nullable: true
        enabled:
          type: boolean
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        showInDiscoveryDocument:
          type: boolean
        userClaims:
          type: array
          items:
            type: string
          nullable: true
        properties:
          type: object
          additionalProperties:
            type: string
          nullable: true
    CreateApiResourceCommand:
      type: object
      properties:
        name:
          type: string
          description: "The unique name of the API. This value is used for authentication \r\nwith introspection and will be added to the audience of the outgoing access token."
          nullable: true
        displayName:
          type: string
          description: The API Resource display name.
          nullable: true
        userClaims:
          type: array
          items:
            type: string
          description: List of associated user claim types that should be included in the access token.
          nullable: true
      description: Command used to create a new identity server API resource.
    UpdateApiResourceCommand:
      type: object
      properties:
        name:
          type: string
          description: "The unique name of the API. This value is used for authentication \r\nwith introspection and will be added to the audience of the outgoing access token."
          nullable: true
        displayName:
          type: string
          description: The API Resource display name.
          nullable: true
        userClaims:
          type: array
          items:
            type: string
          description: List of associated user claim types that should be included in the access token.
          nullable: true
      description: Command used to update an existing ApiResource.
    AuditVersion:
      enum:
        - auditEventPreviewV1
        - auditEventV1
      type: string
      x-ms-enum:
        name: AuditVersion
        modelAsString: false
    AuditActorDto:
      type: object
      properties:
        actorType:
          type: string
          nullable: true
        fullName:
          type: string
          nullable: true
        id:
          type: string
          format: uuid
          nullable: true
        email:
          type: string
          nullable: true
    AuditEventApiDto:
      type: object
      properties:
        version:
          $ref: '#/components/schemas/AuditVersion'
        detailsVersion:
          type: string
          nullable: true
        source:
          type: string
          nullable: true
        category:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        operationId:
          type: string
          format: uuid
        actor:
          $ref: '#/components/schemas/AuditActorDto'
        eventTimestamp:
          type: string
          format: date-time
        details:
          type: object
          nullable: true
    SortOrder:
      enum:
        - asc
        - desc
      type: string
      x-ms-enum:
        name: SortOrder
        modelAsString: false
    AuditQueryRecordDto:
      type: object
      properties:
        createdOn:
          type: string
          format: date-time
        category:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        auditLogDetails:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        detailsVersion:
          type: string
          nullable: true
        source:
          type: string
          nullable: true
    AuditQueryRecordDtoPagedResult:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditQueryRecordDto'
          nullable: true
    AuthenticationProviderDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        authenticationScheme:
          type: string
          nullable: true
        isConnected:
          type: boolean
    ExternalIdentityProviderDto:
      type: object
      properties:
        id:
          type: integer
          description: The database id of the external provider.
          format: int32
        partitionGlobalId:
          type: string
          description: The global id of the partition that this identity provider belongs to.
          format: uuid
        displayName:
          type: string
          description: The display name of the identity provider.
          nullable: true
        displayIcon:
          type: string
          description: "The icon to be displayed next to the identity provider.\r\nOne of these values: [windows, adfs, openid, saml2, other, auth0, okta, google, azuread]."
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
          nullable: true
        clientId:
          type: string
          description: The public identifier inside the external identity provider.
          nullable: true
        clientSecret:
          type: string
          description: The for the specified client.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
        logoutUrl:
          type: string
          description: The logout URL of the external provider.
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the external identity provider is active (enabled).
        settings:
          type: string
          description: Json serialized provider settings
          nullable: true
        isExclusive:
          type: boolean
          description: Flag indicating is the IDP is exclusive and should be the only one used.
    DirectoryConnectionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        partitionId:
          type: integer
          format: int32
        type:
          type: string
          nullable: true
        configuration:
          type: string
          nullable: true
        creationTime:
          type: string
          format: date-time
        lastModificationTime:
          type: string
          format: date-time
          nullable: true
    AuthenticationSettingDto:
      type: object
      properties:
        externalIdentityProviderDto:
          $ref: '#/components/schemas/ExternalIdentityProviderDto'
        directoryConnectionDto:
          $ref: '#/components/schemas/DirectoryConnectionDto'
        authenticationSettingType:
          type: string
          nullable: true
        hostConnectionType:
          type: string
          nullable: true
    AuthenticationSettingUpdateCommand:
      required:
        - authenticationScheme
        - displayName
      type: object
      properties:
        externalIdenptyProviderId:
          type: integer
          format: int32
        allowedIdp:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        configuration:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          description: The global id of the partition that this identity provider belongs to.
          format: uuid
        displayName:
          type: string
          description: The display name of the identity provider.
        displayIcon:
          type: string
          description: "The icon to be displayed next to the identity provider.\r\nOne of these values: [windows, adfs, openid, saml2, other, auth0, okta, google, azuread]."
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
        clientId:
          type: string
          description: The public identifier inside the external identity provider.
          nullable: true
        clientSecret:
          type: string
          description: The for the specified client.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
        logoutUrl:
          type: string
          description: The logout URL of the external identity provider.
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the external identity provider is active (enabled).
        isExclusive:
          type: boolean
          description: Flag indicating is the IDP is exclusive and should be the only one used.
        settings:
          type: string
          description: Json serialized provider settings
          nullable: true
    AuthenticationSettingCommand:
      required:
        - authenticationScheme
        - displayName
      type: object
      properties:
        allowedIdp:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        configuration:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          description: The global id of the partition that this identity provider belongs to.
          format: uuid
        displayName:
          type: string
          description: The display name of the identity provider.
        displayIcon:
          type: string
          description: "The icon to be displayed next to the identity provider.\r\nOne of these values: [windows, adfs, openid, saml2, other, auth0, okta, google, azuread]."
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
        clientId:
          type: string
          description: The public identifier inside the external identity provider.
          nullable: true
        clientSecret:
          type: string
          description: The for the specified client.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
        logoutUrl:
          type: string
          description: The logout URL of the external identity provider.
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the external identity provider is active (enabled).
        isExclusive:
          type: boolean
          description: Flag indicating is the IDP is exclusive and should be the only one used.
        settings:
          type: string
          description: Json serialized provider settings
          nullable: true
    AuthenticationSettingIDPCommand:
      type: object
      properties:
        allowedIdp:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          format: uuid
    AuthenticationSettingDirectoryCommand:
      required:
        - authenticationScheme
        - displayName
      type: object
      properties:
        type:
          type: string
          nullable: true
        configuration:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          description: The global id of the partition that this identity provider belongs to.
          format: uuid
        displayName:
          type: string
          description: The display name of the identity provider.
        displayIcon:
          type: string
          description: "The icon to be displayed next to the identity provider.\r\nOne of these values: [windows, adfs, openid, saml2, other, auth0, okta, google, azuread]."
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
        clientId:
          type: string
          description: The public identifier inside the external identity provider.
          nullable: true
        clientSecret:
          type: string
          description: The for the specified client.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
        logoutUrl:
          type: string
          description: The logout URL of the external identity provider.
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the external identity provider is active (enabled).
        isExclusive:
          type: boolean
          description: Flag indicating is the IDP is exclusive and should be the only one used.
        settings:
          type: string
          description: Json serialized provider settings
          nullable: true
    AuthenticationSettingDirectoryUpdateCommand:
      required:
        - authenticationScheme
        - displayName
      type: object
      properties:
        externalIdenptyProviderId:
          type: integer
          format: int32
        allowedIdp:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        configuration:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          description: The global id of the partition that this identity provider belongs to.
          format: uuid
        displayName:
          type: string
          description: The display name of the identity provider.
        displayIcon:
          type: string
          description: "The icon to be displayed next to the identity provider.\r\nOne of these values: [windows, adfs, openid, saml2, other, auth0, okta, google, azuread]."
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
        clientId:
          type: string
          description: The public identifier inside the external identity provider.
          nullable: true
        clientSecret:
          type: string
          description: The for the specified client.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
        logoutUrl:
          type: string
          description: The logout URL of the external identity provider.
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the external identity provider is active (enabled).
        isExclusive:
          type: boolean
          description: Flag indicating is the IDP is exclusive and should be the only one used.
        settings:
          type: string
          description: Json serialized provider settings
          nullable: true
    KmsKeyType:
      enum:
        - uiPathInternalKey
        - azureKeyVaultCmk
      type: string
      x-ms-enum:
        name: KmsKeyType
        modelAsString: false
    KmsConfigCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        subKey:
          type: string
          nullable: true
        keyType:
          $ref: '#/components/schemas/KmsKeyType'
        configuration:
          type: string
          nullable: true
    TokenUsage:
      enum:
        - reUse
        - oneTimeOnly
      type: string
      x-ms-enum:
        name: TokenUsage
        modelAsString: false
    TokenExpiration:
      enum:
        - sliding
        - absolute
      type: string
      x-ms-enum:
        name: TokenExpiration
        modelAsString: false
    AccessTokenType:
      enum:
        - jwt
        - reference
      type: string
      x-ms-enum:
        name: AccessTokenType
        modelAsString: false
    ClientClaim:
      type: object
      properties:
        type:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        valueType:
          type: string
          nullable: true
    Client:
      type: object
      properties:
        enabled:
          type: boolean
        clientId:
          type: string
          nullable: true
        protocolType:
          type: string
          nullable: true
        clientSecrets:
          type: array
          items:
            $ref: '#/components/schemas/Secret'
          nullable: true
        requireClientSecret:
          type: boolean
        clientName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        clientUri:
          type: string
          nullable: true
        logoUri:
          type: string
          nullable: true
        requireConsent:
          type: boolean
        allowRememberConsent:
          type: boolean
        allowedGrantTypes:
          type: array
          items:
            type: string
          nullable: true
        requirePkce:
          type: boolean
        allowPlainTextPkce:
          type: boolean
        requireRequestObject:
          type: boolean
        allowAccessTokensViaBrowser:
          type: boolean
        redirectUris:
          type: array
          items:
            type: string
          nullable: true
        postLogoutRedirectUris:
          type: array
          items:
            type: string
          nullable: true
        frontChannelLogoutUri:
          type: string
          nullable: true
        frontChannelLogoutSessionRequired:
          type: boolean
        backChannelLogoutUri:
          type: string
          nullable: true
        backChannelLogoutSessionRequired:
          type: boolean
        allowOfflineAccess:
          type: boolean
        allowedScopes:
          type: array
          items:
            type: string
          nullable: true
        alwaysIncludeUserClaimsInIdToken:
          type: boolean
        identityTokenLifetime:
          type: integer
          format: int32
        allowedIdentityTokenSigningAlgorithms:
          type: array
          items:
            type: string
          nullable: true
        accessTokenLifetime:
          type: integer
          format: int32
        authorizationCodeLifetime:
          type: integer
          format: int32
        absoluteRefreshTokenLifetime:
          type: integer
          format: int32
        slidingRefreshTokenLifetime:
          type: integer
          format: int32
        consentLifetime:
          type: integer
          format: int32
          nullable: true
        refreshTokenUsage:
          $ref: '#/components/schemas/TokenUsage'
        updateAccessTokenClaimsOnRefresh:
          type: boolean
        refreshTokenExpiration:
          $ref: '#/components/schemas/TokenExpiration'
        accessTokenType:
          $ref: '#/components/schemas/AccessTokenType'
        enableLocalLogin:
          type: boolean
        identityProviderRestrictions:
          type: array
          items:
            type: string
          nullable: true
        includeJwtId:
          type: boolean
        claims:
          type: array
          items:
            $ref: '#/components/schemas/ClientClaim'
          nullable: true
        alwaysSendClientClaims:
          type: boolean
        clientClaimsPrefix:
          type: string
          nullable: true
        pairWiseSubjectSalt:
          type: string
          nullable: true
        userSsoLifetime:
          type: integer
          format: int32
          nullable: true
        userCodeType:
          type: string
          nullable: true
        deviceCodeLifetime:
          type: integer
          format: int32
        cibaLifetime:
          type: integer
          format: int32
          nullable: true
        pollingInterval:
          type: integer
          format: int32
          nullable: true
        coordinateLifetimeWithUserSession:
          type: boolean
          nullable: true
        allowedCorsOrigins:
          type: array
          items:
            type: string
          nullable: true
        properties:
          type: object
          additionalProperties:
            type: string
          nullable: true
    CreateClientCommand:
      type: object
      properties:
        clientId:
          type: string
          description: Unique ID of the client.
          nullable: true
        clientName:
          type: string
          description: Client display name (used for logging and consent screen)
          nullable: true
        frontChannelLogoutUri:
          type: string
          description: "Specifies logout URI at client for HTTP based front-channel logout. \r\nSee the OIDC Front-Channel spec for more details."
          nullable: true
        backChannelLogoutUri:
          type: string
          description: "Specifies logout URI at client for HTTP based back-channel logout.\r\nSee the OIDC Back-Channel spec for more details."
          nullable: true
        alwaysIncludeUserClaimsInIdToken:
          type: boolean
          description: "When requesting both an id token and access token, should the user claims always be \r\nadded to the id token instead of requiring the client to use the userinfo endpoint. Default is false."
        alwaysSendClientClaims:
          type: boolean
          description: "If set, the client claims will be sent for every flow.\r\nIf not, only for client credentials flow (default is false)."
        requireConsent:
          type: boolean
          description: Specifies whether a consent screen is required. Defaults to true.
        allowOfflineAccess:
          type: boolean
          description: Specifies whether this client can request refresh tokens (be requesting the offline_access scope).
        identityTokenLifetime:
          type: integer
          description: Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)
          format: int32
        accessTokenLifetime:
          type: integer
          description: Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)
          format: int32
        authorizationCodeLifetime:
          type: integer
          description: Lifetime of authorization code in seconds (defaults to 300 seconds / 5 minutes)
          format: int32
        absoluteRefreshTokenLifetime:
          type: integer
          description: Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days
          format: int32
        slidingRefreshTokenLifetime:
          type: integer
          description: Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days
          format: int32
        clientSecrets:
          type: array
          items:
            type: string
          description: List of client secrets - credentials to access the token endpoint.
          nullable: true
        allowedGrantTypes:
          type: array
          items:
            type: string
          description: "Specifies the grant types the client is allowed to use. Use the GrantTypes \r\nclass for common combinations."
          nullable: true
        redirectUris:
          type: array
          items:
            type: string
          description: Specifies the allowed URIs to return tokens or authorization codes to.
          nullable: true
        postLogoutRedirectUris:
          type: array
          items:
            type: string
          description: "Specifies allowed URIs to redirect to after logout.\r\nSee the OIDC Connect Session Management spec for more details."
          nullable: true
        allowedCorsOrigins:
          type: array
          items:
            type: string
          description: "If specified, will be used by the default CORS policy service \r\nimplementations (In-Memory and EF) to build a CORS policy for JavaScript clients."
          nullable: true
        allowedScopes:
          type: array
          items:
            type: string
          description: "By default a client has no access to any resources - specify \r\nthe allowed resources by adding the corresponding scopes names"
          nullable: true
        requireClientSecret:
          type: boolean
          description: Specifies whether this client needs a secret to request tokens from the token endpoint
        requirePkce:
          type: boolean
          description: Specifies whether clients using an authorization code based grant type must send a proof key
        allowAccessTokensViaBrowser:
          type: boolean
          description: Specifies whether this client is allowed to receive access tokens via the browser
      description: Command used to create a new identity server client.
    UpdateClientCommand:
      type: object
      properties:
        clientId:
          type: string
          description: Unique ID of the client.
          nullable: true
        clientName:
          type: string
          description: Client display name (used for logging and consent screen)
          nullable: true
        frontChannelLogoutUri:
          type: string
          description: "Specifies logout URI at client for HTTP based front-channel logout. \r\nSee the OIDC Front-Channel spec for more details."
          nullable: true
        backChannelLogoutUri:
          type: string
          description: "Specifies logout URI at client for HTTP based back-channel logout.\r\nSee the OIDC Back-Channel spec for more details."
          nullable: true
        alwaysIncludeUserClaimsInIdToken:
          type: boolean
          description: "When requesting both an id token and access token, should the user claims always be \r\nadded to the id token instead of requiring the client to use the userinfo endpoint. Default is false."
        alwaysSendClientClaims:
          type: boolean
          description: "If set, the client claims will be sent for every flow.\r\nIf not, only for client credentials flow (default is false)."
        requireConsent:
          type: boolean
          description: Specifies whether a consent screen is required. Defaults to true.
        allowOfflineAccess:
          type: boolean
          description: Specifies whether this client can request refresh tokens (be requesting the offline_access scope).
        identityTokenLifetime:
          type: integer
          description: Lifetime of identity token in seconds (defaults to 300 seconds / 5 minutes)
          format: int32
        accessTokenLifetime:
          type: integer
          description: Lifetime of access token in seconds (defaults to 3600 seconds / 1 hour)
          format: int32
        authorizationCodeLifetime:
          type: integer
          description: Lifetime of authorization code in seconds (defaults to 300 seconds / 5 minutes)
          format: int32
        absoluteRefreshTokenLifetime:
          type: integer
          description: Maximum lifetime of a refresh token in seconds. Defaults to 2592000 seconds / 30 days
          format: int32
        slidingRefreshTokenLifetime:
          type: integer
          description: Sliding lifetime of a refresh token in seconds. Defaults to 1296000 seconds / 15 days
          format: int32
        clientSecrets:
          type: array
          items:
            type: string
          description: List of client secrets - credentials to access the token endpoint.
          nullable: true
        allowedGrantTypes:
          type: array
          items:
            type: string
          description: "Specifies the grant types the client is allowed to use. Use the GrantTypes \r\nclass for common combinations."
          nullable: true
        redirectUris:
          type: array
          items:
            type: string
          description: Specifies the allowed URIs to return tokens or authorization codes to.
          nullable: true
        postLogoutRedirectUris:
          type: array
          items:
            type: string
          description: "Specifies allowed URIs to redirect to after logout.\r\nSee the OIDC Connect Session Management spec for more details."
          nullable: true
        allowedCorsOrigins:
          type: array
          items:
            type: string
          description: "If specified, will be used by the default CORS policy service \r\nimplementations (In-Memory and EF) to build a CORS policy for JavaScript clients."
          nullable: true
        allowedScopes:
          type: array
          items:
            type: string
          description: "By default a client has no access to any resources - specify \r\nthe allowed resources by adding the corresponding scopes names"
          nullable: true
        requireClientSecret:
          type: boolean
          description: Specifies whether this client needs a secret to request tokens from the token endpoint
        requirePkce:
          type: boolean
          description: Specifies whether clients using an authorization code based grant type must send a proof key
        allowAccessTokensViaBrowser:
          type: boolean
          description: Specifies whether this client is allowed to receive access tokens via the browser
      description: Command used to update an existing identity server client.
    SecretDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
          nullable: true
        secret:
          type: string
          nullable: true
        creationTime:
          type: string
          format: date-time
        expiryTime:
          type: string
          format: date-time
          nullable: true
    ClientTemplateType:
      enum:
        - machine
      type: string
      x-ms-enum:
        name: ClientTemplateType
        modelAsString: false
    ClientTemplateDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ClientTemplateType'
    CreateClientFromTemplateCommand:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ClientTemplateType'
        partitionGlobalId:
          type: string
          format: uuid
        clientId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/SecretDto'
          nullable: true
    ClientDto:
      type: object
      properties:
        clientId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/SecretDto'
          nullable: true
    UpdateClientFromTemplateCommand:
      type: object
    CreateClientSecretCommand:
      type: object
      properties:
        clientId:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          format: uuid
        expiryTime:
          type: string
          format: date-time
          nullable: true
    DirectoryEntityType:
      enum:
        - user
        - group
        - application
      type: string
      x-ms-enum:
        name: DirectoryEntityType
        modelAsString: false
    SourceFilter:
      enum:
        - localUsers
        - directoryUsers
        - localGroups
        - directoryGroups
        - robotAccounts
        - applications
      type: string
      description: Filter values for Directory Entities source field
      x-ms-enum:
        name: SourceFilter
        modelAsString: false
    DirectoryEntityInfo:
      type: object
      properties:
        source:
          type: string
          nullable: true
        identifier:
          type: string
          nullable: true
        identityName:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        domain:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/DirectoryEntityType'
        objectType:
          type: string
          nullable: true
    DirectoryTenant:
      type: object
      properties:
        id:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
    ResolveCommand:
      type: object
      properties:
        entityId:
          type: string
          nullable: true
        entityType:
          $ref: '#/components/schemas/DirectoryEntityType'
      description: Command for resolving directory entities based on their Id
    DirectoryEntity:
      required:
        - objectType
      type: object
      properties:
        objectType:
          type: string
        source:
          type: string
          nullable: true
        identifier:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
      discriminator:
        propertyName: objectType
    DirectoryUser:
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
        - type: object
          properties:
            firstName:
              type: string
              nullable: true
            lastName:
              type: string
              nullable: true
            jobTitle:
              type: string
              nullable: true
            companyName:
              type: string
              nullable: true
            city:
              type: string
              nullable: true
            department:
              type: string
              nullable: true
    DirectoryGroup:
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
        - type: object
    DirectoryRobotUser:
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
        - type: object
    DirectoryApplication:
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
        - type: object
          properties:
            applicationId:
              type: string
              nullable: true
    ResolveByNameCommand:
      type: object
      properties:
        entityName:
          type: string
          nullable: true
        entityType:
          $ref: '#/components/schemas/DirectoryEntityType'
      description: Command for resolving directory entities based on their unique name
    MembershipCommand:
      type: object
      properties:
        userId:
          type: string
          description: Unique User Identifier
          nullable: true
        groupIds:
          type: array
          items:
            type: string
          description: List of group ids to check the user membership
          nullable: true
      description: Command for retrieving user membership
    BulkResolveByNameCommand:
      type: object
      properties:
        entityNames:
          type: array
          items:
            type: string
          nullable: true
        entityType:
          $ref: '#/components/schemas/DirectoryEntityType'
        scope:
          type: string
          nullable: true
      description: Command for resolving multiple directory entities
    DirectoryScope:
      type: object
      properties:
        name:
          type: string
          nullable: true
        isDefault:
          type: boolean
    CreateDirectoryConnectionCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        type:
          type: string
          nullable: true
        configuration:
          type: string
          nullable: true
      description: Command used to create a new DirectoryConnection
    TestConnectionConfigurationCommand:
      type: object
      properties:
        type:
          type: string
          nullable: true
        configuration:
          type: string
          nullable: true
      description: Command used to test a directoty connection configuration
    UpdateDirectoryConnectionCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        configuration:
          type: string
          nullable: true
      description: Command used to update an existing DirectoryConnection
    ConfigurationValueType:
      enum:
        - string
        - number
        - choice
        - boolean
        - section
        - secret
      type: string
      x-ms-enum:
        name: ConfigurationValueType
        modelAsString: false
    ConfigurationEntry:
      type: object
      properties:
        key:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        valueType:
          $ref: '#/components/schemas/ConfigurationValueType'
    ApiScopeType:
      enum:
        - user
        - application
        - userAndApplication
      type: string
      description: Define the usage for Scope.
      x-ms-enum:
        name: ApiScopeType
        modelAsString: false
    ExternalScopeDto:
      type: object
      properties:
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/ApiScopeType'
    ExternalResourceDto:
      type: object
      properties:
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ExternalScopeDto'
          nullable: true
    ExternalClientDto:
      type: object
      properties:
        name:
          type: string
          nullable: true
        id:
          type: string
          nullable: true
        secret:
          type: string
          nullable: true
        isConfidential:
          type: boolean
        redirectUri:
          type: string
          nullable: true
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ExternalResourceDto'
          nullable: true
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/SecretDto'
          nullable: true
    UpdateExternalClientCommand:
      type: object
      properties:
        name:
          type: string
          nullable: true
        redirectUri:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ExternalScopeDto'
          nullable: true
    CreateExternalClientCommand:
      required:
        - isConfidential
        - name
        - partitionGlobalId
        - scopes
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        name:
          type: string
        isConfidential:
          type: boolean
        redirectUri:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ExternalScopeDto'
    CreateExternalIdentityProviderCommand:
      required:
        - authenticationScheme
        - displayName
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: The global id of the partition that this identity provider belongs to.
          format: uuid
        displayName:
          type: string
          description: The display name of the identity provider.
        displayIcon:
          type: string
          description: "The icon to be displayed next to the identity provider.\r\nOne of these values: [windows, adfs, openid, saml2, other, auth0, okta, google, azuread]."
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
        clientId:
          type: string
          description: The public identifier inside the external identity provider.
          nullable: true
        clientSecret:
          type: string
          description: The for the specified client.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
        logoutUrl:
          type: string
          description: The logout URL of the external identity provider.
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the external identity provider is active (enabled).
        isExclusive:
          type: boolean
          description: Flag indicating is the IDP is exclusive and should be the only one used.
        settings:
          type: string
          description: Json serialized provider settings
          nullable: true
      description: Command used to create an external identity provider.
    UpdateExternalIdentityProviderCommand:
      required:
        - authenticationScheme
        - displayName
      type: object
      properties:
        id:
          type: integer
          description: The database id of the external provider.
          format: int32
        partitionGlobalId:
          type: string
          description: The global id of the partition that this identity provider belongs to.
          format: uuid
        displayName:
          type: string
          description: The display name of the identity provider.
        displayIcon:
          type: string
          description: "The icon to be displayed next to the identity provider.\r\nOne of these values: [windows, adfs, openid, saml2, other, auth0, okta, google, azuread]."
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
        clientId:
          type: string
          description: The public identifier inside the external identity provider.
          nullable: true
        clientSecret:
          type: string
          description: The for the specified client.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
        logoutUrl:
          type: string
          description: The logout URL of the external identity provider.
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the external identity provider is active (enabled).
        isExclusive:
          type: boolean
          description: Flag indicating is the IDP is exclusive and should be the only one used.
        settings:
          type: string
          description: Json serialized provider settings
          nullable: true
      description: Command used to update an external identity provider.
    GlobalExternalClientDto:
      type: object
      properties:
        publisherPartitionId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        logoUri:
          type: string
          nullable: true
        clientId:
          type: string
          nullable: true
        isConfidential:
          type: boolean
        redirectUri:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ExternalScopeDto'
          nullable: true
        secrets:
          type: array
          items:
            $ref: '#/components/schemas/SecretDto'
          nullable: true
    UpdateGlobalExternalClientCommand:
      type: object
      properties:
        description:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        redirectUri:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ExternalScopeDto'
          nullable: true
    CreateGlobalExternalClientCommand:
      required:
        - isConfidential
        - name
        - partitionGlobalId
        - scopes
      type: object
      properties:
        description:
          type: string
          nullable: true
        logoUri:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          format: uuid
        name:
          type: string
        isConfidential:
          type: boolean
        redirectUri:
          type: string
          nullable: true
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/ExternalScopeDto'
    GroupType:
      enum:
        - builtIn
        - custom
      type: string
      x-ms-enum:
        name: GroupType
        modelAsString: false
    GroupDto:
      type: object
      properties:
        id:
          type: string
          description: The database id (Guid).
          format: uuid
        name:
          type: string
          description: The unique name of the group.
          nullable: true
        displayName:
          type: string
          description: The friendly name of the group.
          nullable: true
          deprecated: true
        type:
          $ref: '#/components/schemas/GroupType'
        creationTime:
          type: string
          description: The group's creation time.
          format: date-time
        lastModificationTime:
          type: string
          description: The group's last modification time.
          format: date-time
          nullable: true
        members:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/DirectoryUser'
              - $ref: '#/components/schemas/DirectoryGroup'
              - $ref: '#/components/schemas/DirectoryRobotUser'
              - $ref: '#/components/schemas/DirectoryApplication'
          nullable: true
      description: Represents a group entity.
    BulkGroupDeleteCommand:
      type: object
      properties:
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups to be removed
          nullable: true
      description: Command used to delete multiple groups.
    CreateGroupCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Group partition identifier
          format: uuid
        id:
          type: string
          description: Group unique identifier
          format: uuid
        name:
          type: string
          description: Group Name
          nullable: true
        directoryUserMemberIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the users to be added as members of the group.
          nullable: true
      description: Command used to create a new local group.
    UpdateGroupCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Group partition identifier
          format: uuid
        name:
          type: string
          description: Group Name
          nullable: true
        directoryUserIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the users to be added as members of the group.
          nullable: true
        directoryUserIDsToRemove:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the users to be removed from the group.
          nullable: true
      description: Command used to update group information.
    IdentityResource:
      type: object
      properties:
        required:
          type: boolean
        emphasize:
          type: boolean
        enabled:
          type: boolean
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        showInDiscoveryDocument:
          type: boolean
        userClaims:
          type: array
          items:
            type: string
          nullable: true
        properties:
          type: object
          additionalProperties:
            type: string
          nullable: true
    CreateIdentityResourceCommand:
      type: object
      properties:
        name:
          type: string
          description: "The unique name of the identity resource. This is the value a client will\r\nuse for the scope parameter in the authorize request."
          nullable: true
        displayName:
          type: string
          description: The Identity Resource display name.
          nullable: true
        userClaims:
          type: array
          items:
            type: string
          description: List of associated user claim types that should be included in the identity token.
          nullable: true
      description: Command used to create a new identity server identity resource.
    UpdateIdentityResourceCommand:
      type: object
      properties:
        name:
          type: string
          description: "The unique name of the identity resource. This is the value a client \r\nwill use for the scope parameter in the authorize request."
          nullable: true
        displayName:
          type: string
          description: The identity Resource display name.
          nullable: true
        userClaims:
          type: array
          items:
            type: string
          description: List of associated user claim types that should be included in the identity token.
          nullable: true
      description: Command used to update an existing IdentityResource.
    LanguageDto:
      type: object
      properties:
        code:
          type: string
          description: The language code.
          nullable: true
        name:
          type: string
          description: The language name.
          nullable: true
    MessageTemplateDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
    UpdateMessageTemplateCommand:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
          nullable: true
      description: Command used to update an existing message template
    CreateMessageTemplateCommand:
      type: object
      properties:
        name:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      description: Command used to create a new message template
    DeleteOrganizationServiceInstanceRequestDto:
      type: object
      properties:
        callbackUrl:
          type: string
          format: uri
          nullable: true
        organizationId:
          type: string
          format: uuid
        deletionTime:
          type: string
          format: date-time
        isHardDelete:
          type: boolean
    DeleteOrganizationResponseDto:
      type: object
      properties:
        organizationId:
          type: string
          nullable: true
        serviceType:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        isHardDelete:
          type: boolean
    PartitionType:
      enum:
        - host
        - organization
      type: string
      x-ms-enum:
        name: PartitionType
        modelAsString: false
    PartitionStatus:
      enum:
        - active
        - deleted
        - inactive
      type: string
      x-ms-enum:
        name: PartitionStatus
        modelAsString: false
    PartitionDto:
      type: object
      properties:
        globalId:
          type: string
          description: Partition`s global Id
          format: uuid
        type:
          $ref: '#/components/schemas/PartitionType'
        status:
          $ref: '#/components/schemas/PartitionStatus'
        allowedIdp:
          type: string
          description: Partition`s allowed Idp
          nullable: true
        name:
          type: string
          description: Partition`s name
          nullable: true
        language:
          type: string
          description: Partition`s language
          nullable: true
    UpdatePartitionCommand:
      type: object
      properties:
        name:
          type: string
          nullable: true
        language:
          type: string
          nullable: true
        allowedIdp:
          type: string
          nullable: true
        isActive:
          type: boolean
      description: Command used to update a partition.
    IdentityError:
      type: object
      properties:
        code:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    IdentityResult:
      type: object
      properties:
        succeeded:
          type: boolean
          readOnly: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/IdentityError'
          nullable: true
          readOnly: true
    CreatePartitionCommand:
      required:
        - globalId
        - type
      type: object
      properties:
        globalId:
          type: string
          description: The global identifier for the partition.
          format: uuid
        type:
          $ref: '#/components/schemas/PartitionType'
        name:
          type: string
          description: Gets or sets the partition name.
          nullable: true
        language:
          type: string
          description: Gets or sets the partition language.
          nullable: true
        allowedIdp:
          type: string
          description: Gets or sets the partition allowed Idp.
          nullable: true
      description: Command used to create a new partition.
    UpdatePartitionAccessPolicyCommand:
      type: object
      properties:
        entitiesToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: Entitites to add to the partition access policy
          nullable: true
        entitiesToRemove:
          type: array
          items:
            type: string
            format: uuid
          description: Entitites to remove from the partition access policy
          nullable: true
        entityType:
          $ref: '#/components/schemas/DirectoryEntityType'
      description: Command used to update the partition access policy entities
    PropertiesResponse:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: string
          nullable: true
    CompatibilityReportResponse:
      type: object
      properties:
        status:
          type: string
          nullable: true
        compatibilityChecksum:
          type: string
          nullable: true
        success:
          type: boolean
        reason:
          type: string
          nullable: true
    DataMoveRequest:
      type: object
      properties:
        callBackUrl:
          type: string
          format: uri
          nullable: true
        sourceScaleUnitId:
          type: string
          nullable: true
        destinationScaleUnitId:
          type: string
          nullable: true
        compatibilityChecksum:
          type: string
          nullable: true
        migrationCorrelationId:
          type: string
          nullable: true
        peerProperties:
          type: object
          additionalProperties:
            type: string
          nullable: true
    DataMoveResponse:
      type: object
      properties:
        status:
          type: string
          nullable: true
        dataVerificationCheckSum:
          type: string
          nullable: true
        success:
          type: boolean
        reason:
          type: string
          nullable: true
    MaintenanceModeRequest:
      type: object
      properties:
        callBackUrl:
          type: string
          format: uri
          nullable: true
        migrationCorrelationId:
          type: string
          nullable: true
    MaintenanceModeResponse:
      type: object
      properties:
        status:
          type: string
          nullable: true
        success:
          type: boolean
        reason:
          type: string
          nullable: true
    FinalizeRequest:
      type: object
      properties:
        migrationCorrelationId:
          type: string
          nullable: true
    RollbackRequest:
      type: object
      properties:
        callBackUrl:
          type: string
          format: uri
          nullable: true
        migrationCorrelationId:
          type: string
          nullable: true
    RollbackResponse:
      type: object
      properties:
        status:
          type: string
          nullable: true
        success:
          type: boolean
        reason:
          type: string
          nullable: true
    DeleteRequest:
      type: object
      properties:
        callBackUrl:
          type: string
          format: uri
          nullable: true
        migrationCorrelationId:
          type: string
          nullable: true
    DeleteResponse:
      type: object
      properties:
        status:
          type: string
          nullable: true
        success:
          type: boolean
        reason:
          type: string
          nullable: true
    CreateReferenceTokenCommand:
      required:
        - description
        - expiration
        - scopes
      type: object
      properties:
        description:
          type: string
        expiration:
          type: string
          format: date-time
        scopes:
          type: array
          items:
            type: string
    ReferenceTokenDto:
      type: object
      properties:
        referenceToken:
          type: string
          nullable: true
        id:
          type: string
          nullable: true
        userId:
          type: string
          format: uuid
        description:
          type: string
          nullable: true
        expiration:
          type: string
          format: date-time
        scopes:
          type: array
          items:
            type: string
          nullable: true
        lastUsed:
          type: string
          format: date-time
          nullable: true
    BulkDeleteReferenceTokensCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        userIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
    RegenerateReferenceTokenCommand:
      required:
        - expiration
      type: object
      properties:
        expiration:
          type: string
          format: date-time
    UserAccessTokenDto:
      type: object
      properties:
        userAccessToken:
          type: string
          nullable: true
        expiresInSeconds:
          type: integer
          format: int32
    SortOrderDto:
      enum:
        - asc
        - desc
      type: string
      x-ms-enum:
        name: SortOrderDto
        modelAsString: false
    RobotAccountDto:
      type: object
      properties:
        id:
          type: string
          description: The database id (Guid).
          format: uuid
        name:
          type: string
          description: The unique name of the robot account.
          nullable: true
        displayName:
          type: string
          description: The friendly name of the robot account.
          nullable: true
        creationTime:
          type: string
          description: The RobotAccount's creation time.
          format: date-time
        lastLoginTime:
          type: string
          description: The robot account's last login time.
          format: date-time
          nullable: true
        groupIds:
          type: array
          items:
            type: string
            format: uuid
          description: Groups that this robot account is member of
          nullable: true
      description: Represents a user to run unattended process
    RobotAccountDtoPagedResultDto:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of entities.
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/RobotAccountDto'
          description: The results from the current page.
          nullable: true
    BulkRobotAccountDeleteCommand:
      type: object
      properties:
        robotAccountIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the robot accounts to be removed
          nullable: true
      description: Command used for deleting multiple robot accounts.
    CreateRobotAccountCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Robot account partition identifier
          format: uuid
        name:
          type: string
          description: Robot account name
          nullable: true
        displayName:
          type: string
          description: The friendly name of the robot account.
          nullable: true
        groupIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this robot account should be added to.
          nullable: true
      description: Command used to create a new robot account.
    UpdateRobotAccountCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Robot account partition identifier
          format: uuid
        displayName:
          type: string
          description: The friendly name of the robot account.
          nullable: true
        groupIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this robot account should be added to.
          nullable: true
        groupIDsToRemove:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this robot account should be removed from.
          nullable: true
      description: "Command used to update robot account information.\r\nOnly Display Name and group membership can be change. \r\nUsername is read-only after creation since change in username cannot be handled in Orchestrator"
    RobotClientSecretCommand:
      type: object
      properties:
        clientId:
          type: string
          nullable: true
        secret:
          type: string
          nullable: true
        robotUserKey:
          type: string
          format: uuid
        partitionGlobalId:
          type: string
          format: uuid
    RobotClientSecretDto:
      type: object
      properties:
        clientId:
          type: string
          nullable: true
        robotUserKey:
          type: string
          format: uuid
        partitionGlobalId:
          type: string
          format: uuid
    RobotPropertiesDeleteCommand:
      type: object
      properties:
        clientSecret:
          type: string
          nullable: true
        robotUserKey:
          type: string
          format: uuid
    RobotPropertiesBulkDeleteCommand:
      type: object
      properties:
        clientId:
          type: string
          nullable: true
        robotUserProperties:
          type: array
          items:
            $ref: '#/components/schemas/RobotPropertiesDeleteCommand'
          nullable: true
    RuleDto:
      type: object
      properties:
        id:
          type: integer
          description: The database id of the rule.
          format: int32
        partitionGlobalId:
          type: string
          description: The global id of the partition that this rule provider belongs to.
          format: uuid
        name:
          type: string
          description: The name of the rule.
          nullable: true
        description:
          type: string
          description: Human readable description of the rule.
          nullable: true
        enabled:
          type: boolean
          description: Flag weather this rule is enabled
        definition:
          type: string
          description: Rule definition
          nullable: true
        assignedGroups:
          type: array
          items:
            $ref: '#/components/schemas/GroupDto'
          description: Groups to be assigned part of this rule
          nullable: true
    CreateRuleCommand:
      type: object
      properties:
        name:
          type: string
          description: The name of the rule.
          nullable: true
        description:
          type: string
          description: Human readable description of the rule.
          nullable: true
        enabled:
          type: boolean
          description: Flag weather this rule is enabled
        definition:
          type: string
          description: Rule definition
          nullable: true
        partitionGlobalId:
          type: string
          description: Global Partition Id for the operation
          format: uuid
    UpdateRuleCommand:
      type: object
      properties:
        ruleId:
          type: integer
          description: ID of the Rule to be updated
          format: int32
        name:
          type: string
          description: The name of the rule.
          nullable: true
        description:
          type: string
          description: Human readable description of the rule.
          nullable: true
        enabled:
          type: boolean
          description: Flag weather this rule is enabled
        definition:
          type: string
          description: Rule definition
          nullable: true
        partitionGlobalId:
          type: string
          description: Global Partition Id for the operation
          format: uuid
    BulkDeleteCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Partition containing the rules to delete
          format: uuid
        ruleIds:
          type: array
          items:
            type: integer
            format: int32
          description: Ids of the rules to be removed
          nullable: true
    SettingDto:
      type: object
      properties:
        id:
          type: integer
          description: The database id.
          format: int64
        key:
          type: string
          description: The setting Key
          nullable: true
        value:
          type: string
          description: The value of the setting.
          nullable: true
        partitionGlobalId:
          type: string
          description: Value indicating if the partition this setting belongs to.
          format: uuid
        userId:
          type: string
          description: The user global Id of the setting.
          format: uuid
          nullable: true
    CreateOrUpdateSettingCommand:
      required:
        - key
      type: object
      properties:
        key:
          type: string
          description: The setting Key
        value:
          type: string
          description: The value of the setting.
          nullable: true
      description: Command used to create or update an application setting.
    BulkCreateOrUpdateSettingsCommand:
      required:
        - settings
      type: object
      properties:
        settings:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrUpdateSettingCommand'
          description: The list of settings to be created/updated.
        partitionGlobalId:
          type: string
          description: The partition global Id of the setting
          format: uuid
          nullable: true
        userId:
          type: string
          description: The user global Id of the setting.
          format: uuid
          nullable: true
      description: Class used to create/update a list of settings in a bulk operation.
    BulkDeleteSettingsCommand:
      required:
        - partitionGlobalId
        - settings
      type: object
      properties:
        settings:
          type: array
          items:
            type: string
          description: The list of settings to be deleted.
        partitionGlobalId:
          type: string
          description: The partition global Id of the setting
          format: uuid
      description: Class used to delete a list of settings in a bulk operation.
    SmtpClientConfiguration:
      type: object
      properties:
        host:
          type: string
          nullable: true
        port:
          type: integer
          format: int32
        userName:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        domain:
          type: string
          nullable: true
        enableSsl:
          type: boolean
        useDefaultCredentials:
          type: boolean
        fromAddress:
          type: string
          nullable: true
        fromDisplayName:
          type: string
          nullable: true
    VerifySmtpSettingsCommand:
      required:
        - recipient
      type: object
      properties:
        recipient:
          type: string
        smtpSettings:
          $ref: '#/components/schemas/SmtpClientConfiguration'
      description: Command used to verify smtp settings.
    AssumeUserIdentityCommand:
      type: object
      properties:
        actorToken:
          type: string
          nullable: true
        partitionGlobalId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        scopes:
          type: array
          items:
            type: string
          nullable: true
    ActorUserTokenDto:
      type: object
      properties:
        actorUserToken:
          type: string
          nullable: true
        expiresInSeconds:
          type: integer
          format: int32
    UserType:
      enum:
        - user
        - robot
        - directoryUser
        - directoryGroup
        - robotAccount
        - application
      type: string
      description: Defines how a user was created and how it is supposed to be used.
      x-ms-enum:
        name: UserType
        modelAsString: false
    UserDto:
      type: object
      properties:
        id:
          type: string
          description: The database id (Guid).
          format: uuid
        userName:
          type: string
          description: The username.
          nullable: true
        email:
          type: string
          description: The user's email address.
          nullable: true
        emailConfirmed:
          type: boolean
          description: Whether the user`s email has been confirmed or not.
        name:
          type: string
          description: The first name of the user.
          nullable: true
        surname:
          type: string
          description: The last name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user.
          nullable: true
        creationTime:
          type: string
          description: The user's creation time.
          format: date-time
        lastModificationTime:
          type: string
          description: The user's last modification time.
          format: date-time
          nullable: true
        lastLoginTime:
          type: string
          description: The user's last login time.
          format: date-time
          nullable: true
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        legacyId:
          type: integer
          format: int64
        isActive:
          type: boolean
          description: Flag indicating if the user is active.
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
        type:
          $ref: '#/components/schemas/UserType'
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
    UpdateUserCommand:
      type: object
      properties:
        name:
          type: string
          description: The name of the user.
          nullable: true
        surname:
          type: string
          description: The name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user
          nullable: true
        email:
          type: string
          description: The user's email address.
          format: email
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the user is active.
          nullable: true
        password:
          type: string
          description: The user's new password.
          nullable: true
        groupIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user should be added to.
          nullable: true
        groupIDsToRemove:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user should be removed from.
          nullable: true
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
          nullable: true
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
          nullable: true
      description: Command used to update the user.
    CreateUserLoginCommand:
      type: object
      properties:
        loginProvider:
          type: string
          description: Gets or sets the login provider for the login (e.g. facebook, google)
          nullable: true
        providerKey:
          type: string
          description: Gets or sets the unique provider identifier for this login.
          nullable: true
        providerDisplayName:
          type: string
          description: Gets or sets the friendly name used in a UI for this login.
          nullable: true
    CreateUserCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: The tenant global id that the user belongs to.
          format: uuid
        password:
          type: string
          description: The user's password.
          nullable: true
        validatePassword:
          type: boolean
          description: Flag indicating if we need to validate the password.
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user is a member of.
          nullable: true
        userLogins:
          type: array
          items:
            $ref: '#/components/schemas/CreateUserLoginCommand'
          description: The user logins
          nullable: true
        id:
          type: string
          description: The user global id
          format: uuid
          nullable: true
        userName:
          type: string
          description: The user's name.
          nullable: true
        email:
          type: string
          description: The user's email address.
          format: email
          nullable: true
        name:
          type: string
          description: The name of the user.
          nullable: true
        surname:
          type: string
          description: The name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user
          nullable: true
        type:
          $ref: '#/components/schemas/UserType'
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
        legacyId:
          type: integer
          description: "User legacy id can be specified from an external source. If null, uses the default auto-increment behavior.\r\nThis is needed to stay in sync with the TMS user data while we are in dual-mode."
          format: int64
          nullable: true
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
      description: Command used to create a new user.
    BulkSoftDeleteCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        userIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
    CreateUserCommandBase:
      type: object
      properties:
        id:
          type: string
          description: The user global id
          format: uuid
          nullable: true
        userName:
          type: string
          description: The user's name.
          nullable: true
        email:
          type: string
          description: The user's email address.
          format: email
          nullable: true
        name:
          type: string
          description: The name of the user.
          nullable: true
        surname:
          type: string
          description: The name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user
          nullable: true
        type:
          $ref: '#/components/schemas/UserType'
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
        legacyId:
          type: integer
          description: "User legacy id can be specified from an external source. If null, uses the default auto-increment behavior.\r\nThis is needed to stay in sync with the TMS user data while we are in dual-mode."
          format: int64
          nullable: true
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
    CreateUsersCommand:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/CreateUserCommandBase'
          description: Users information.
          nullable: true
        partitionGlobalId:
          type: string
          description: The tenant global id that the user belongs to.
          format: uuid
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user is a member of.
          nullable: true
      description: Command used to create new users.
    ChangeUserPasswordCommand:
      type: object
      properties:
        oldPassword:
          type: string
          description: The user's old password.
          nullable: true
        newPassword:
          type: string
          description: The user's new password.
          nullable: true
      description: Command used to change user's password.
    InvitedUser:
      type: object
      properties:
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user is a member of.
          nullable: true
        name:
          type: string
          description: The first name of the user.
          nullable: true
        surname:
          type: string
          description: The last name of the user.
          nullable: true
        redirectUrl:
          type: string
          nullable: true
        email:
          type: string
          description: The user's email address.
          nullable: true
        language:
          type: string
          description: The user's language.
          nullable: true
      description: Invite user request
    UserMetadataCommand:
      type: object
      properties:
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        termsAndConditionsAccepted:
          type: boolean
    ActionResult:
      type: object
    LoginAttemptResult:
      enum:
        - success
        - invalidPassword
        - userIsNotActive
        - invalidUserNameTenancyName
        - tenantIsNotActive
        - userEmailIsNotConfirmed
        - unknownExternalLogin
        - lockedOut
        - externalFailedAuthentication
        - adLogin
      type: string
      x-ms-enum:
        name: LoginAttemptResult
        modelAsString: false
    UserLoginAttemptDto:
      type: object
      properties:
        id:
          type: integer
          description: The database identifier of the UserLoginAttempt
          format: int64
        partitionName:
          type: string
          description: The name of the partition on which the attempt was made.
          nullable: true
        userId:
          type: string
          description: The id of the user on which the attempt was made.
          format: uuid
          nullable: true
        userNameOrEmailAddress:
          type: string
          description: The user/email address used in the attempt.
          nullable: true
        clientIpAddress:
          type: string
          description: The IP address of the client
          nullable: true
        clientName:
          type: string
          description: The name of the PC from where the attempt was made.
          nullable: true
        browserInfo:
          type: string
          description: Information about the browser that was used in the attempt.
          nullable: true
        result:
          $ref: '#/components/schemas/LoginAttemptResult'
        creationTime:
          type: string
          description: The date and time when the attempt was made.
          format: date-time
        partitionGlobalId:
          type: string
          description: The global partition id.
          format: uuid
    UserLoginAttemptDtoPagedResultDto:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of entities.
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserLoginAttemptDto'
          description: The results from the current page.
          nullable: true
    ExternalIdentityProviderSmallDto:
      type: object
      properties:
        id:
          type: integer
          description: The database id of the external provider.
          format: int32
        displayName:
          type: string
          description: The display name of the identity provider.
          nullable: true
        authenticationScheme:
          type: string
          description: The authentication scheme used by the identity provider.
          nullable: true
        authority:
          type: string
          description: The address of the identity provider.
          nullable: true
    OrganizationInfo:
      type: object
      properties:
        name:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        globalId:
          type: string
          format: uuid
        friendlyName:
          type: string
          nullable: true
        externalIdentityProviders:
          type: array
          items:
            $ref: '#/components/schemas/ExternalIdentityProviderSmallDto'
          nullable: true
        invitationAccepted:
          type: boolean
    UserDtoPagedResultDto:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of entities.
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
          description: The results from the current page.
          nullable: true
    PartitionDtoPagedResultDto:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of entities.
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/PartitionDto'
          description: The results from the current page.
          nullable: true
    CreateUserPartitionCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
      description: Command used to create a user partition record
  securitySchemes:
    Bearer:
      type: apiKey
      description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"'
      name: Authorization
      in: header
security:
  - Bearer: []
