openapi: 3.0.1
info:
  title: IdentityServer External API
  version: 3.2.54
  x-uipath-version: 3.2.54
servers:
  - url: https://cloud.uipath.com/identity_
paths:
  /api/AuditQuery/{partitionGlobalId}:
    get:
      tags:
        - AuditQuery
      operationId: AuditQuery_GetAuditEvents
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: language
          in: query
          schema:
            type: string
        - name: top
          in: query
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: skip
          in: query
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: sortBy
          in: query
          schema:
            type: string
        - name: sortOrder
          in: query
          schema:
            $ref: '#/components/schemas/SortOrder'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditQueryRecordDtoPagedResult'
  /api/AuditQuery/{partitionGlobalId}/download:
    get:
      tags:
        - AuditQuery
      operationId: AuditQuery_DownloadAuditEvents
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: language
          in: query
          schema:
            type: string
        - name: size
          in: query
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
          content:
            application/octet-stream:
              schema:
                type: file
                format: binary
  /api/Group/{partitionGlobalId}:
    get:
      tags:
        - Group
      summary: Get all local and built-in groups from a partition
      description: 'OAuth required scopes: PM.Group or PM.Group.Read.'
      operationId: Group_GetGroups
      parameters:
        - name: partitionGlobalId
          in: path
          description: partition id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupDto'
    delete:
      tags:
        - Group
      summary: Deletes multiple local groups from a partition
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_BulkDelete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkGroupDeleteCommand'
      responses:
        "204":
          description: No Content
  /api/Group/{partitionGlobalId}/{groupId}:
    get:
      tags:
        - Group
      summary: Get local or built-in group by partition and group Id
      description: 'OAuth required scopes: PM.Group or PM.Group.Read.'
      operationId: Group_GetGroup
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
    delete:
      tags:
        - Group
      summary: Deletes a local group
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
  /api/Group:
    post:
      tags:
        - Group
      summary: Creates a new local group
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_CreateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupCommand'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
  /api/Group/{groupId}:
    put:
      tags:
        - Group
      summary: Updates a local group information.
      description: 'OAuth required scopes: PM.Group or PM.Group.Write.'
      operationId: Group_UpdateGroup
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
  /api/MessageTemplate/{templateId}:
    get:
      tags:
        - MessageTemplate
      summary: Get a message template by Id.
      operationId: MessageTemplate_GetTemplate_By_Id
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
    put:
      tags:
        - MessageTemplate
      summary: Update existing message template.
      operationId: MessageTemplate_UpdateTemplate
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMessageTemplateCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
  /api/MessageTemplate:
    get:
      tags:
        - MessageTemplate
      summary: Get a message template using the provided filter.
      operationId: MessageTemplate_GetTemplate
      parameters:
        - name: name
          in: query
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageTemplateDto'
  /api/RobotAccount/{partitionGlobalId}:
    get:
      tags:
        - RobotAccount
      summary: Get all robot accounts from a partition
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Read.'
      operationId: RobotAccount_GetRobotAccounts
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: searchTerm
          in: query
          schema:
            type: string
        - name: top
          in: query
          description: The number of records to return. Default is 10. Range is 0 to 1000.
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int32
        - name: skip
          in: query
          description: The number of records to skip. Default is 0.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The name of the field to sort by.
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order.
          schema:
            $ref: '#/components/schemas/SortOrderDto'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDtoPagedResultDto'
    delete:
      tags:
        - RobotAccount
      summary: Deletes multiple robot accounts from a partition
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_BulkDelete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRobotAccountDeleteCommand'
      responses:
        "204":
          description: No Content
  /api/RobotAccount/{partitionGlobalId}/{robotAccountId}:
    get:
      tags:
        - RobotAccount
      summary: Get robot account by partition and robot account Id
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Read.'
      operationId: RobotAccount_GetRobotAccount
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: robotAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
    delete:
      tags:
        - RobotAccount
      summary: Deletes a robot account
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_Delete
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: robotAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
  /api/RobotAccount:
    post:
      tags:
        - RobotAccount
      summary: Creates a new  robot account
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_CreateRobotAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRobotAccountCommand'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
  /api/RobotAccount/{robotAccountId}:
    put:
      tags:
        - RobotAccount
      summary: Updates a robot account information.
      description: 'OAuth required scopes: PM.RobotAccount or PM.RobotAccount.Write.'
      operationId: RobotAccount_UpdateRobotAccount
      parameters:
        - name: robotAccountId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRobotAccountCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RobotAccountDto'
  /api/SamlCertificate/{partitionGlobalId}/certificates:
    get:
      tags:
        - SamlCertificate
      summary: Get the certificate pair for the partition.
      operationId: SamlCertificate_GetCertificatePair
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePair'
        "404":
          description: Not Found
  /api/SamlCertificate/primary:
    put:
      tags:
        - SamlCertificate
      summary: Add or update the primary certificate.
      operationId: SamlCertificate_UpdatePrimaryCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCertificateCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePair'
        "400":
          description: Bad Request
        "404":
          description: Not Found
  /api/SamlCertificate/secondary:
    put:
      tags:
        - SamlCertificate
      summary: Add or update the secondary certificate.
      operationId: SamlCertificate_UpdateSecondaryCertificate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCertificateCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePair'
        "400":
          description: Bad Request
        "404":
          description: Not Found
  /api/SamlCertificate/{partitionGlobalId}/switch:
    post:
      tags:
        - SamlCertificate
      summary: Switch the secondary certificate to be the primary certificate.
      operationId: SamlCertificate_SwitchToPrimary
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatePair'
        "400":
          description: Bad Request
        "404":
          description: Not Found
  /api/SamlCertificate/{partitionGlobalId}/{certificateId}:
    delete:
      tags:
        - SamlCertificate
      summary: Delete a certificate by its ID.
      operationId: SamlCertificate_DeleteCertificate
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
        - name: certificateId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: boolean
        "400":
          description: Bad Request
        "404":
          description: Not Found
  /api/Setting:
    get:
      tags:
        - Setting
      summary: Get an application settings for a list of keys in a tenant
      description: 'OAuth required scopes: PM.Setting or PM.Setting.Read.'
      operationId: Setting_GetSettingsBulk
      parameters:
        - name: key
          in: query
          style: form
          schema:
            type: array
            items:
              type: string
          explode: true
        - name: partitionGlobalId
          in: query
          schema:
            type: string
            format: uuid
        - name: userId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
    put:
      tags:
        - Setting
      summary: Updates or create new settings if they don't exist on a specific tenant.
      description: 'OAuth required scopes: PM.Setting or PM.Setting.Write.'
      operationId: Setting_UpdateSettings
      requestBody:
        description: A bulk command to create/update a list of settings on a specific tenant.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkCreateOrUpdateSettingsCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingDto'
        "409":
          description: Conflict
  /api/User/{userId}:
    get:
      tags:
        - User
      summary: Get the user at the specified location
      description: 'OAuth required scopes: PM.User or PM.User.Read.'
      operationId: User_GetUser
      parameters:
        - name: userId
          in: path
          description: The data used to create a new user.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
    put:
      tags:
        - User
      summary: Updates the specified user.
      description: Updating user groups requires partition administrator group membership.
      operationId: User_Update
      parameters:
        - name: userId
          in: path
          description: The database identifier of the user.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The command that stores the information to update user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
    delete:
      tags:
        - User
      summary: Deletes the specified user.
      operationId: User_Delete
      parameters:
        - name: userId
          in: path
          description: The id of the user that will be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No Content
  /api/User:
    post:
      tags:
        - User
      summary: Creates a new user. This API will fail if a user with the same email or username already exists.
      description: Creating user in a group requires partition administrator group membership.
      operationId: User_CreateUser
      requestBody:
        description: The data used to create a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
    delete:
      tags:
        - User
      summary: Bulk deletes the specified list of users.
      operationId: User_BulkDelete
      requestBody:
        description: The bulk delete command.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSoftDeleteCommand'
      responses:
        "204":
          description: No Content
  /api/User/users/{partitionGlobalId}:
    get:
      tags:
        - User
      description: 'OAuth required scopes: PM.User or PM.User.Read.'
      operationId: User_GetUsers
      parameters:
        - name: partitionGlobalId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: searchTerm
          in: query
          schema:
            type: string
        - name: top
          in: query
          description: The number of records to return. Default is 10. Range is 0 to 1000.
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int32
        - name: skip
          in: query
          description: The number of records to skip. Default is 0.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The name of the field to sort by.
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order.
          schema:
            $ref: '#/components/schemas/SortOrderDto'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDtoPagedResultDto'
  /api/User/BulkCreate:
    post:
      tags:
        - User
      summary: Creates users in bulk.
      description: Creating users in a group requires partition administrator group membership.
      operationId: User_CreateUsers
      requestBody:
        description: The data used to create a users in bulk.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUsersCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
  /api/User/{userId}/changepassword:
    post:
      tags:
        - User
      summary: Changes the user's password.
      description: 'OAuth required scopes: PM.User or PM.User.Write.'
      operationId: User_ChangePassword
      parameters:
        - name: userId
          in: path
          description: The database user id.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: The change user password command..
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserPasswordCommand'
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
  /api/User/{userId}/loginAttempts:
    get:
      tags:
        - UserLoginAttempt
      summary: Get the login attempts of a user
      description: 'OAuth required scopes: PM.UserLoginAttempt or PM.UserLoginAttempt.Read.'
      operationId: UserLoginAttempt_GetLoginAttempts
      parameters:
        - name: userId
          in: path
          description: The data used to create a new user.
          required: true
          schema:
            type: string
            format: uuid
        - name: userSID
          in: query
          description: The AD user SID.
          schema:
            type: string
        - name: top
          in: query
          description: The number of records to return. Default is 10. Range is 0 to 1000.
          schema:
            maximum: 1000
            minimum: 0
            type: integer
            format: int32
        - name: skip
          in: query
          description: The number of records to skip. Default is 0.
          schema:
            maximum: 2147483647
            minimum: 0
            type: integer
            format: int32
        - name: sortBy
          in: query
          description: The name of the field to sort by.
          schema:
            type: string
        - name: sortOrder
          in: query
          description: The sort order.
          schema:
            $ref: '#/components/schemas/SortOrderDto'
        - name: since
          in: query
          description: The date since records should be returned.
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginAttemptDtoPagedResultDto'
components:
  schemas:
    AddCertificateCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        certificate:
          type: string
          nullable: true
    AuditQueryRecordDto:
      type: object
      properties:
        createdOn:
          type: string
          format: date-time
        category:
          type: string
          nullable: true
        action:
          type: string
          nullable: true
        auditLogDetails:
          type: string
          nullable: true
        userName:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        detailsVersion:
          type: string
          nullable: true
        source:
          type: string
          nullable: true
    AuditQueryRecordDtoPagedResult:
      type: object
      properties:
        totalCount:
          type: integer
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/AuditQueryRecordDto'
          nullable: true
    BulkCreateOrUpdateSettingsCommand:
      required:
        - settings
      type: object
      properties:
        settings:
          type: array
          items:
            $ref: '#/components/schemas/CreateOrUpdateSettingCommand'
          description: The list of settings to be created/updated.
        partitionGlobalId:
          type: string
          description: The partition global Id of the setting
          format: uuid
          nullable: true
        userId:
          type: string
          description: The user global Id of the setting.
          format: uuid
          nullable: true
      description: Class used to create/update a list of settings in a bulk operation.
    BulkGroupDeleteCommand:
      type: object
      properties:
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups to be removed
          nullable: true
      description: Command used to delete multiple groups.
    BulkRobotAccountDeleteCommand:
      type: object
      properties:
        robotAccountIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the robot accounts to be removed
          nullable: true
      description: Command used for deleting multiple robot accounts.
    BulkSoftDeleteCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        userIds:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
    CertificatePair:
      required:
        - partitionGlobalId
        - primaryCertificateId
        - primaryCertificateThumbprint
      type: object
      properties:
        partitionGlobalId:
          type: string
          format: uuid
        primaryCertificateId:
          type: integer
          format: int64
        primaryCertificate:
          type: string
          nullable: true
        primaryCertificateThumbprint:
          type: string
        secondaryCertificateId:
          type: integer
          format: int64
          nullable: true
        secondaryCertificate:
          type: string
          nullable: true
        secondaryCertificateThumbprint:
          type: string
          nullable: true
    ChangeUserPasswordCommand:
      type: object
      properties:
        oldPassword:
          type: string
          description: The user's old password.
          nullable: true
        newPassword:
          type: string
          description: The user's new password.
          nullable: true
      description: Command used to change user's password.
    CreateGroupCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Group partition identifier
          format: uuid
        id:
          type: string
          description: Group unique identifier
          format: uuid
        name:
          type: string
          description: Group Name
          nullable: true
        directoryUserMemberIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the users to be added as members of the group.
          nullable: true
      description: Command used to create a new local group.
    CreateOrUpdateSettingCommand:
      required:
        - key
      type: object
      properties:
        key:
          type: string
          description: The setting Key
        value:
          type: string
          description: The value of the setting.
          nullable: true
      description: Command used to create or update an application setting.
    CreateRobotAccountCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Robot account partition identifier
          format: uuid
        name:
          type: string
          description: Robot account name
          nullable: true
        displayName:
          type: string
          description: The friendly name of the robot account.
          nullable: true
        groupIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this robot account should be added to.
          nullable: true
      description: Command used to create a new robot account.
    CreateUserCommand:
      type: object
      properties:
        id:
          type: string
          description: The user global id
          format: uuid
          nullable: true
        userName:
          type: string
          description: The user's name.
          nullable: true
        email:
          type: string
          description: The user's email address.
          format: email
          nullable: true
        name:
          type: string
          description: The name of the user.
          nullable: true
        surname:
          type: string
          description: The name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user
          nullable: true
        type:
          $ref: '#/components/schemas/UserType'
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
        legacyId:
          type: integer
          description: "User legacy id can be specified from an external source. If null, uses the default auto-increment behavior.\r\nThis is needed to stay in sync with the TMS user data while we are in dual-mode."
          format: int64
          nullable: true
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
        partitionGlobalId:
          type: string
          description: The tenant global id that the user belongs to.
          format: uuid
        password:
          type: string
          description: The user's password.
          nullable: true
        validatePassword:
          type: boolean
          description: Flag indicating if we need to validate the password.
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user is a member of.
          nullable: true
        userLogins:
          type: array
          items:
            $ref: '#/components/schemas/CreateUserLoginCommand'
          description: The user logins
          nullable: true
      description: Command used to create a new user.
    CreateUserCommandBase:
      type: object
      properties:
        id:
          type: string
          description: The user global id
          format: uuid
          nullable: true
        userName:
          type: string
          description: The user's name.
          nullable: true
        email:
          type: string
          description: The user's email address.
          format: email
          nullable: true
        name:
          type: string
          description: The name of the user.
          nullable: true
        surname:
          type: string
          description: The name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user
          nullable: true
        type:
          $ref: '#/components/schemas/UserType'
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
        legacyId:
          type: integer
          description: "User legacy id can be specified from an external source. If null, uses the default auto-increment behavior.\r\nThis is needed to stay in sync with the TMS user data while we are in dual-mode."
          format: int64
          nullable: true
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
    CreateUserLoginCommand:
      type: object
      properties:
        loginProvider:
          type: string
          description: Gets or sets the login provider for the login (e.g. facebook, google)
          nullable: true
        providerKey:
          type: string
          description: Gets or sets the unique provider identifier for this login.
          nullable: true
        providerDisplayName:
          type: string
          description: Gets or sets the friendly name used in a UI for this login.
          nullable: true
    CreateUsersCommand:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/CreateUserCommandBase'
          description: Users information.
          nullable: true
        partitionGlobalId:
          type: string
          description: The tenant global id that the user belongs to.
          format: uuid
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user is a member of.
          nullable: true
      description: Command used to create new users.
    DirectoryApplication:
      type: object
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
      properties:
        applicationId:
          type: string
          nullable: true
    DirectoryEntity:
      required:
        - objectType
      type: object
      properties:
        objectType:
          type: string
        source:
          type: string
          nullable: true
        identifier:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
      discriminator:
        propertyName: objectType
    DirectoryGroup:
      type: object
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
    DirectoryRobotUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
    DirectoryUser:
      type: object
      allOf:
        - $ref: '#/components/schemas/DirectoryEntity'
      properties:
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        jobTitle:
          type: string
          nullable: true
        companyName:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        department:
          type: string
          nullable: true
        extensionUserAttributes:
          type: object
          additionalProperties:
            type: string
          nullable: true
        externalId:
          type: string
          nullable: true
        creationTime:
          type: string
          format: date-time
    GroupDto:
      type: object
      properties:
        id:
          type: string
          description: The database id (Guid).
          format: uuid
        name:
          type: string
          description: The unique name of the group.
          nullable: true
        displayName:
          type: string
          description: The friendly name of the group.
          nullable: true
          deprecated: true
        type:
          $ref: '#/components/schemas/GroupType'
        creationTime:
          type: string
          description: The group's creation time.
          format: date-time
        lastModificationTime:
          type: string
          description: The group's last modification time.
          format: date-time
          nullable: true
        members:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/DirectoryUser'
              - $ref: '#/components/schemas/DirectoryGroup'
              - $ref: '#/components/schemas/DirectoryRobotUser'
              - $ref: '#/components/schemas/DirectoryApplication'
          nullable: true
      description: Represents a group entity.
    GroupType:
      enum:
        - builtIn
        - custom
      type: string
      x-ms-enum:
        name: GroupType
        modelAsString: false
    IdentityError:
      type: object
      properties:
        code:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    IdentityResult:
      type: object
      properties:
        succeeded:
          type: boolean
          readOnly: true
        errors:
          type: array
          items:
            $ref: '#/components/schemas/IdentityError'
          nullable: true
          readOnly: true
    LoginAttemptResult:
      enum:
        - success
        - invalidPassword
        - userIsNotActive
        - invalidUserNameTenancyName
        - tenantIsNotActive
        - userEmailIsNotConfirmed
        - unknownExternalLogin
        - lockedOut
        - externalFailedAuthentication
        - adLogin
      type: string
      x-ms-enum:
        name: LoginAttemptResult
        modelAsString: false
    MessageTemplateDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
    RobotAccountDto:
      type: object
      properties:
        id:
          type: string
          description: The database id (Guid).
          format: uuid
        name:
          type: string
          description: The unique name of the robot account.
          nullable: true
        displayName:
          type: string
          description: The friendly name of the robot account.
          nullable: true
        creationTime:
          type: string
          description: The RobotAccount's creation time.
          format: date-time
        lastLoginTime:
          type: string
          description: The robot account's last login time.
          format: date-time
          nullable: true
        groupIds:
          type: array
          items:
            type: string
            format: uuid
          description: Groups that this robot account is member of
          nullable: true
      description: Represents a user to run unattended process
    RobotAccountDtoPagedResultDto:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of entities.
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/RobotAccountDto'
          description: The results from the current page.
          nullable: true
    SettingDto:
      type: object
      properties:
        id:
          type: integer
          description: The database id.
          format: int64
        key:
          type: string
          description: The setting Key
          nullable: true
        value:
          type: string
          description: The value of the setting.
          nullable: true
        partitionGlobalId:
          type: string
          description: Value indicating if the partition this setting belongs to.
          format: uuid
        userId:
          type: string
          description: The user global Id of the setting.
          format: uuid
          nullable: true
    SortOrder:
      enum:
        - asc
        - desc
      type: string
      x-ms-enum:
        name: SortOrder
        modelAsString: false
    SortOrderDto:
      enum:
        - asc
        - desc
      type: string
      x-ms-enum:
        name: SortOrderDto
        modelAsString: false
    UpdateGroupCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Group partition identifier
          format: uuid
        name:
          type: string
          description: Group Name
          nullable: true
        directoryUserIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the users to be added as members of the group.
          nullable: true
        directoryUserIDsToRemove:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the users to be removed from the group.
          nullable: true
      description: Command used to update group information.
    UpdateMessageTemplateCommand:
      type: object
      properties:
        id:
          type: integer
          format: int64
        value:
          type: string
          nullable: true
      description: Command used to update an existing message template
    UpdateRobotAccountCommand:
      type: object
      properties:
        partitionGlobalId:
          type: string
          description: Robot account partition identifier
          format: uuid
        displayName:
          type: string
          description: The friendly name of the robot account.
          nullable: true
        groupIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this robot account should be added to.
          nullable: true
        groupIDsToRemove:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this robot account should be removed from.
          nullable: true
      description: "Command used to update robot account information.\r\nOnly Display Name and group membership can be change. \r\nUsername is read-only after creation since change in username cannot be handled in Orchestrator"
    UpdateUserCommand:
      type: object
      properties:
        name:
          type: string
          description: The name of the user.
          nullable: true
        surname:
          type: string
          description: The name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user
          nullable: true
        email:
          type: string
          description: The user's email address.
          format: email
          nullable: true
        isActive:
          type: boolean
          description: Flag indicating if the user is active.
          nullable: true
        password:
          type: string
          description: The user's new password.
          nullable: true
        groupIDsToAdd:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user should be added to.
          nullable: true
        groupIDsToRemove:
          type: array
          items:
            type: string
            format: uuid
          description: IDs of the groups this user should be removed from.
          nullable: true
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
          nullable: true
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
          nullable: true
        extensionUserAttributesToAddOrUpdate:
          type: object
          additionalProperties:
            type: string
          description: Extension user attributes this user should be added to or updated on.
          nullable: true
        extensionUserAttributesToRemove:
          type: array
          items:
            type: string
          description: Extension user attributes this user should be removed from.
          nullable: true
      description: Command used to update the user.
    UserDto:
      type: object
      properties:
        id:
          type: string
          description: The database id (Guid).
          format: uuid
        userName:
          type: string
          description: The username.
          nullable: true
        email:
          type: string
          description: The user's email address.
          nullable: true
        emailConfirmed:
          type: boolean
          description: Whether the user`s email has been confirmed or not.
        name:
          type: string
          description: The first name of the user.
          nullable: true
        surname:
          type: string
          description: The last name of the user.
          nullable: true
        displayName:
          type: string
          description: Display name of the user.
          nullable: true
        creationTime:
          type: string
          description: The user's creation time.
          format: date-time
        lastModificationTime:
          type: string
          description: The user's last modification time.
          format: date-time
          nullable: true
        lastLoginTime:
          type: string
          description: The user's last login time.
          format: date-time
          nullable: true
        groupIDs:
          type: array
          items:
            type: string
            format: uuid
          nullable: true
        legacyId:
          type: integer
          format: int64
        isActive:
          type: boolean
          description: Flag indicating if the user is active.
        bypassBasicAuthRestriction:
          type: boolean
          description: Flag indicating if this user will bypass the basic authentication restriction.
        type:
          $ref: '#/components/schemas/UserType'
        invitationAccepted:
          type: boolean
          description: Flag indicating whether the user has accepted invitation or not.
    UserDtoPagedResultDto:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of entities.
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
          description: The results from the current page.
          nullable: true
    UserLoginAttemptDto:
      type: object
      properties:
        id:
          type: integer
          description: The database identifier of the UserLoginAttempt
          format: int64
        partitionName:
          type: string
          description: The name of the partition on which the attempt was made.
          nullable: true
        userId:
          type: string
          description: The id of the user on which the attempt was made.
          format: uuid
          nullable: true
        userNameOrEmailAddress:
          type: string
          description: The user/email address used in the attempt.
          nullable: true
        clientIpAddress:
          type: string
          description: The IP address of the client
          nullable: true
        clientName:
          type: string
          description: The name of the PC from where the attempt was made.
          nullable: true
        browserInfo:
          type: string
          description: Information about the browser that was used in the attempt.
          nullable: true
        result:
          $ref: '#/components/schemas/LoginAttemptResult'
        creationTime:
          type: string
          description: The date and time when the attempt was made.
          format: date-time
        partitionGlobalId:
          type: string
          description: The global partition id.
          format: uuid
    UserLoginAttemptDtoPagedResultDto:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of entities.
          format: int64
        results:
          type: array
          items:
            $ref: '#/components/schemas/UserLoginAttemptDto'
          description: The results from the current page.
          nullable: true
    UserType:
      enum:
        - user
        - robot
        - directoryUser
        - directoryGroup
        - robotAccount
        - application
      type: string
      description: Defines how a user was created and how it is supposed to be used.
      x-ms-enum:
        name: UserType
        modelAsString: false
  securitySchemes:
    Bearer:
      type: http
      description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer {token}"'
      scheme: bearer
      bearerFormat: JWT
security:
  - Bearer: []
