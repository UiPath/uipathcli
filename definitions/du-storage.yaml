openapi: 3.0.1
info:
  title: UiPath.DocumentUnderstanding.Storage.Api
  version: v1
servers:
- url: https://cloud.uipath.com/{organization}/{tenant}/du_/api/storage
  description: The production url
  variables:
    organization:
      description: The organization name (or id)
      default: my-org
    tenant:
      description: The tenant name (or id)
      default: my-tenant
paths:
  /signature/{objectKey}:
    post:
      tags:
        - Signature
      summary: Generate pre-signed URL
      description: This route generates a presigned URL which can be used to upload and download a specific object.
      operationId: presigned-url
      parameters:
        - name: objectKey
          in: path
          description: The object key
          required: true
          schema:
            type: string
        - name: x-uipath-storage-class
          in: header
          description: The storage class
          schema:
            type: string
      requestBody:
        description: The presigned URL request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneratePresignedUrlRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/GeneratePresignedUrlRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/GeneratePresignedUrlRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/PresignedUrlResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /store:
    get:
      tags:
        - Storage
      summary: List objects
      description: "This route lists all the storage objects which optionally match a given prefix.\r\n            \r\nIt uses continuation tokens to support pagination."
      operationId: list
      parameters:
        - name: prefix
          in: query
          description: The object prefix to search for
          schema:
            type: string
        - name: continuationToken
          in: query
          description: The continuation token from the previous request to support pagination
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ListObjectsResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectsResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ListObjectsResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Storage
      summary: Delete all objects matching prefix
      description: This route deletes all objects which match the given deletePrefix.
      operationId: batch-delete
      parameters:
        - name: deletePrefix
          in: query
          description: The prefix to search for
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/BatchDeleteResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /store/{objectKey}:
    head:
      tags:
        - Storage
      summary: Get object metadata
      description: This route returns the object metadata in form of HTTP headers without the file content.
      operationId: metadata
      parameters:
        - name: objectKey
          in: path
          description: The object key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    get:
      tags:
        - Storage
      summary: Download file from storage
      description: This route returns the file content for the given object key.
      operationId: download
      parameters:
        - name: objectKey
          in: path
          description: The object key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Storage
      summary: Upload file to storage
      description: This route uploads the file content to storage.
      operationId: upload
      parameters:
        - name: x-uipath-storage-class
          in: header
          description: The storage class
          schema:
            type: string
        - name: objectKey
          in: path
          description: The object key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: The file to upload
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Storage
      summary: Delete object
      description: This route deletes the object with the given object key and its metadata from storage
      operationId: delete
      parameters:
        - name: objectKey
          in: path
          description: The object key
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    BatchDeleteResponse:
      type: object
      properties:
        numberOfDeletedKeys:
          type: integer
          format: int32
      additionalProperties: false
    ErrorResponse:
      type: object
      properties:
        errorMessage:
          type: string
          nullable: true
        errorMessageKey:
          type: string
          nullable: true
        errorMessageParams:
          type: array
          items:
            type: string
          nullable: true
        isSuccess:
          type: boolean
        hasErrors:
          type: boolean
          readOnly: true
      additionalProperties: false
    GeneratePresignedUrlRequest:
      type: object
      properties:
        startDate:
          type: string
          description: The start date defining from when the URL is valid
          nullable: true
        expires:
          type: integer
          description: Time in seconds when the URL expires
          format: int32
        action:
          $ref: '#/components/schemas/Permission'
      additionalProperties: false
      description: Request for generating presigned URLs
    ListObjectsResponse:
      type: object
      properties:
        objectKeys:
          type: array
          items:
            type: string
          nullable: true
        continuationToken:
          type: string
          nullable: true
      additionalProperties: false
    Permission:
      enum:
        - GET
        - PUT
      type: string
      description: The permission for the presigned url
    PresignedUrlResponse:
      type: object
      properties:
        url:
          type: string
          format: uri
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
  securitySchemes:
    BearerToken:
      type: http
      description: Authorization header using the Bearer scheme
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerToken: []
